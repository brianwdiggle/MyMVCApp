#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyMVCApp.DAL
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="walkingDB")]
	public partial class WalkingDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertArealink(Arealink instance);
    partial void UpdateArealink(Arealink instance);
    partial void DeleteArealink(Arealink instance);
    partial void InsertWalkType(WalkType instance);
    partial void UpdateWalkType(WalkType instance);
    partial void DeleteWalkType(WalkType instance);
    partial void InsertArea(Area instance);
    partial void UpdateArea(Area instance);
    partial void DeleteArea(Area instance);
    partial void InsertAreaType(AreaType instance);
    partial void UpdateAreaType(AreaType instance);
    partial void DeleteAreaType(AreaType instance);
    partial void InsertClass(Class instance);
    partial void UpdateClass(Class instance);
    partial void DeleteClass(Class instance);
    partial void InsertClasslink(Classlink instance);
    partial void UpdateClasslink(Classlink instance);
    partial void DeleteClasslink(Classlink instance);
    partial void InsertHillAscent(HillAscent instance);
    partial void UpdateHillAscent(HillAscent instance);
    partial void DeleteHillAscent(HillAscent instance);
    partial void InsertHill(Hill instance);
    partial void UpdateHill(Hill instance);
    partial void DeleteHill(Hill instance);
    partial void InsertMarker(Marker instance);
    partial void UpdateMarker(Marker instance);
    partial void DeleteMarker(Marker instance);
    partial void InsertMarker_Observation(Marker_Observation instance);
    partial void UpdateMarker_Observation(Marker_Observation instance);
    partial void DeleteMarker_Observation(Marker_Observation instance);
    partial void InsertMarker_Status(Marker_Status instance);
    partial void UpdateMarker_Status(Marker_Status instance);
    partial void DeleteMarker_Status(Marker_Status instance);
    partial void InsertWalk_AssociatedFile_Type(Walk_AssociatedFile_Type instance);
    partial void UpdateWalk_AssociatedFile_Type(Walk_AssociatedFile_Type instance);
    partial void DeleteWalk_AssociatedFile_Type(Walk_AssociatedFile_Type instance);
    partial void InsertWalk_AssociatedFile(Walk_AssociatedFile instance);
    partial void UpdateWalk_AssociatedFile(Walk_AssociatedFile instance);
    partial void DeleteWalk_AssociatedFile(Walk_AssociatedFile instance);
    partial void InsertWalk(Walk instance);
    partial void UpdateWalk(Walk instance);
    partial void DeleteWalk(Walk instance);
    #endregion
		
        /// <summary>
        /// This is where the switch is made between DEV and LIVE db instances
        /// TODO: make this an application variable which can be changed at runtime
        /// </summary>
		public WalkingDataContext() : 
				base(global::MyMVCApp.DAL.Properties.Settings.Default.walkingLIVE, mappingSource)
		{
			OnCreated();
		}
		
		public WalkingDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public WalkingDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public WalkingDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public WalkingDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Arealink> Arealinks
		{
			get
			{
				return this.GetTable<Arealink>();
			}
		}
		
		public System.Data.Linq.Table<WalkType> WalkTypes
		{
			get
			{
				return this.GetTable<WalkType>();
			}
		}
		
		public System.Data.Linq.Table<Area> Areas
		{
			get
			{
				return this.GetTable<Area>();
			}
		}
		
		public System.Data.Linq.Table<AreaType> AreaTypes
		{
			get
			{
				return this.GetTable<AreaType>();
			}
		}
		
		public System.Data.Linq.Table<Class> Classes
		{
			get
			{
				return this.GetTable<Class>();
			}
		}
		
		public System.Data.Linq.Table<Classlink> Classlinks
		{
			get
			{
				return this.GetTable<Classlink>();
			}
		}
		
		public System.Data.Linq.Table<HillAscent> HillAscents
		{
			get
			{
				return this.GetTable<HillAscent>();
			}
		}
		
		public System.Data.Linq.Table<Hill> Hills
		{
			get
			{
				return this.GetTable<Hill>();
			}
		}
		
		public System.Data.Linq.Table<Marker> Markers
		{
			get
			{
				return this.GetTable<Marker>();
			}
		}
		
		public System.Data.Linq.Table<Marker_Observation> Marker_Observations
		{
			get
			{
				return this.GetTable<Marker_Observation>();
			}
		}
		
		public System.Data.Linq.Table<Marker_Status> Marker_Status
		{
			get
			{
				return this.GetTable<Marker_Status>();
			}
		}
		
		public System.Data.Linq.Table<MarylynParentChild> MarylynParentChilds
		{
			get
			{
				return this.GetTable<MarylynParentChild>();
			}
		}
		
		public System.Data.Linq.Table<Walk_AssociatedFile_Type> Walk_AssociatedFile_Types
		{
			get
			{
				return this.GetTable<Walk_AssociatedFile_Type>();
			}
		}
		
		public System.Data.Linq.Table<Walk_AssociatedFile> Walk_AssociatedFiles
		{
			get
			{
				return this.GetTable<Walk_AssociatedFile>();
			}
		}
		
		public System.Data.Linq.Table<Walk> Walks
		{
			get
			{
				return this.GetTable<Walk>();
			}
		}
		
		public System.Data.Linq.Table<MyProgress> MyProgresses
		{
			get
			{
				return this.GetTable<MyProgress>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.sp_GetMyProgress")]
		public ISingleResult<MyProgress> sp_GetMyProgress()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<MyProgress>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.sp_GetMyProgressByClassType")]
		public ISingleResult<MyProgress> sp_GetMyProgressByClassType([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ClassType", DbType="Char(1)")] System.Nullable<char> classType)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), classType);
			return ((ISingleResult<MyProgress>)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Arealink")]
	public partial class Arealink : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _Hillnumber;
		
		private string _Arearef;
		
		private bool _Alt_Area;
		
		private int _AreaLinkID;
		
		private EntityRef<Hill> _Hill;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnHillnumberChanging(short value);
    partial void OnHillnumberChanged();
    partial void OnArearefChanging(string value);
    partial void OnArearefChanged();
    partial void OnAlt_AreaChanging(bool value);
    partial void OnAlt_AreaChanged();
    partial void OnAreaLinkIDChanging(int value);
    partial void OnAreaLinkIDChanged();
    #endregion
		
		public Arealink()
		{
			this._Hill = default(EntityRef<Hill>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hillnumber", DbType="SmallInt NOT NULL")]
		public short Hillnumber
		{
			get
			{
				return this._Hillnumber;
			}
			set
			{
				if ((this._Hillnumber != value))
				{
					if (this._Hill.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHillnumberChanging(value);
					this.SendPropertyChanging();
					this._Hillnumber = value;
					this.SendPropertyChanged("Hillnumber");
					this.OnHillnumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Arearef", DbType="Char(10) NOT NULL", CanBeNull=false)]
		public string Arearef
		{
			get
			{
				return this._Arearef;
			}
			set
			{
				if ((this._Arearef != value))
				{
					this.OnArearefChanging(value);
					this.SendPropertyChanging();
					this._Arearef = value;
					this.SendPropertyChanged("Arearef");
					this.OnArearefChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Alt_Area", DbType="Bit NOT NULL")]
		public bool Alt_Area
		{
			get
			{
				return this._Alt_Area;
			}
			set
			{
				if ((this._Alt_Area != value))
				{
					this.OnAlt_AreaChanging(value);
					this.SendPropertyChanging();
					this._Alt_Area = value;
					this.SendPropertyChanged("Alt_Area");
					this.OnAlt_AreaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AreaLinkID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AreaLinkID
		{
			get
			{
				return this._AreaLinkID;
			}
			set
			{
				if ((this._AreaLinkID != value))
				{
					this.OnAreaLinkIDChanging(value);
					this.SendPropertyChanging();
					this._AreaLinkID = value;
					this.SendPropertyChanged("AreaLinkID");
					this.OnAreaLinkIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Hill_Arealink", Storage="_Hill", ThisKey="Hillnumber", OtherKey="Hillnumber", IsForeignKey=true)]
		public Hill Hill
		{
			get
			{
				return this._Hill.Entity;
			}
			set
			{
				Hill previousValue = this._Hill.Entity;
				if (((previousValue != value) 
							|| (this._Hill.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Hill.Entity = null;
						previousValue.Arealinks.Remove(this);
					}
					this._Hill.Entity = value;
					if ((value != null))
					{
						value.Arealinks.Add(this);
						this._Hillnumber = value.Hillnumber;
					}
					else
					{
						this._Hillnumber = default(short);
					}
					this.SendPropertyChanged("Hill");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WalkTypes")]
	public partial class WalkType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _WalkTypeString;
		
		private EntitySet<Walk> _Walks;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnWalkTypeStringChanging(string value);
    partial void OnWalkTypeStringChanged();
    #endregion
		
		public WalkType()
		{
			this._Walks = new EntitySet<Walk>(new Action<Walk>(this.attach_Walks), new Action<Walk>(this.detach_Walks));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WalkTypeString", DbType="NVarChar(30) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string WalkTypeString
		{
			get
			{
				return this._WalkTypeString;
			}
			set
			{
				if ((this._WalkTypeString != value))
				{
					this.OnWalkTypeStringChanging(value);
					this.SendPropertyChanging();
					this._WalkTypeString = value;
					this.SendPropertyChanged("WalkTypeString");
					this.OnWalkTypeStringChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WalkType_Walk", Storage="_Walks", ThisKey="WalkTypeString", OtherKey="WalkType")]
		public EntitySet<Walk> Walks
		{
			get
			{
				return this._Walks;
			}
			set
			{
				this._Walks.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Walks(Walk entity)
		{
			this.SendPropertyChanging();
			entity.WalkType1 = this;
		}
		
		private void detach_Walks(Walk entity)
		{
			this.SendPropertyChanging();
			entity.WalkType1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Areas")]
	public partial class Area : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Country;
		
		private string _Arearef;
		
		private string _Shortname;
		
		private string _Areaname;
		
		private System.Nullable<char> _AreaType;
		
		private EntitySet<Walk> _Walks;
		
		private EntityRef<AreaType> _AreaType1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCountryChanging(string value);
    partial void OnCountryChanged();
    partial void OnArearefChanging(string value);
    partial void OnArearefChanged();
    partial void OnShortnameChanging(string value);
    partial void OnShortnameChanged();
    partial void OnAreanameChanging(string value);
    partial void OnAreanameChanged();
    partial void OnAreaTypeChanging(System.Nullable<char> value);
    partial void OnAreaTypeChanged();
    #endregion
		
		public Area()
		{
			this._Walks = new EntitySet<Walk>(new Action<Walk>(this.attach_Walks), new Action<Walk>(this.detach_Walks));
			this._AreaType1 = default(EntityRef<AreaType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Country", DbType="Char(2) NOT NULL", CanBeNull=false)]
		public string Country
		{
			get
			{
				return this._Country;
			}
			set
			{
				if ((this._Country != value))
				{
					this.OnCountryChanging(value);
					this.SendPropertyChanging();
					this._Country = value;
					this.SendPropertyChanged("Country");
					this.OnCountryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Arearef", DbType="Char(10) NOT NULL", CanBeNull=false)]
		public string Arearef
		{
			get
			{
				return this._Arearef;
			}
			set
			{
				if ((this._Arearef != value))
				{
					this.OnArearefChanging(value);
					this.SendPropertyChanging();
					this._Arearef = value;
					this.SendPropertyChanged("Arearef");
					this.OnArearefChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Shortname", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Shortname
		{
			get
			{
				return this._Shortname;
			}
			set
			{
				if ((this._Shortname != value))
				{
					this.OnShortnameChanging(value);
					this.SendPropertyChanging();
					this._Shortname = value;
					this.SendPropertyChanged("Shortname");
					this.OnShortnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Areaname", DbType="NVarChar(100) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Areaname
		{
			get
			{
				return this._Areaname;
			}
			set
			{
				if ((this._Areaname != value))
				{
					this.OnAreanameChanging(value);
					this.SendPropertyChanging();
					this._Areaname = value;
					this.SendPropertyChanged("Areaname");
					this.OnAreanameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AreaType", DbType="Char(1)")]
		public System.Nullable<char> AreaType
		{
			get
			{
				return this._AreaType;
			}
			set
			{
				if ((this._AreaType != value))
				{
					if (this._AreaType1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAreaTypeChanging(value);
					this.SendPropertyChanging();
					this._AreaType = value;
					this.SendPropertyChanged("AreaType");
					this.OnAreaTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Area_Walk", Storage="_Walks", ThisKey="Areaname", OtherKey="WalkAreaName")]
		public EntitySet<Walk> Walks
		{
			get
			{
				return this._Walks;
			}
			set
			{
				this._Walks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AreaType_Area", Storage="_AreaType1", ThisKey="AreaType", OtherKey="AreaType1", IsForeignKey=true)]
		public AreaType AreaType1
		{
			get
			{
				return this._AreaType1.Entity;
			}
			set
			{
				AreaType previousValue = this._AreaType1.Entity;
				if (((previousValue != value) 
							|| (this._AreaType1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AreaType1.Entity = null;
						previousValue.Areas.Remove(this);
					}
					this._AreaType1.Entity = value;
					if ((value != null))
					{
						value.Areas.Add(this);
						this._AreaType = value.AreaType1;
					}
					else
					{
						this._AreaType = default(Nullable<char>);
					}
					this.SendPropertyChanged("AreaType1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Walks(Walk entity)
		{
			this.SendPropertyChanging();
			entity.Area = this;
		}
		
		private void detach_Walks(Walk entity)
		{
			this.SendPropertyChanging();
			entity.Area = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AreaTypes")]
	public partial class AreaType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private char _AreaType1;
		
		private string _AreaTypeName;
		
		private EntitySet<Area> _Areas;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAreaType1Changing(char value);
    partial void OnAreaType1Changed();
    partial void OnAreaTypeNameChanging(string value);
    partial void OnAreaTypeNameChanged();
    #endregion
		
		public AreaType()
		{
			this._Areas = new EntitySet<Area>(new Action<Area>(this.attach_Areas), new Action<Area>(this.detach_Areas));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="AreaType", Storage="_AreaType1", DbType="Char(1) NOT NULL", IsPrimaryKey=true)]
		public char AreaType1
		{
			get
			{
				return this._AreaType1;
			}
			set
			{
				if ((this._AreaType1 != value))
				{
					this.OnAreaType1Changing(value);
					this.SendPropertyChanging();
					this._AreaType1 = value;
					this.SendPropertyChanged("AreaType1");
					this.OnAreaType1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AreaTypeName", DbType="NChar(50) NOT NULL", CanBeNull=false)]
		public string AreaTypeName
		{
			get
			{
				return this._AreaTypeName;
			}
			set
			{
				if ((this._AreaTypeName != value))
				{
					this.OnAreaTypeNameChanging(value);
					this.SendPropertyChanging();
					this._AreaTypeName = value;
					this.SendPropertyChanged("AreaTypeName");
					this.OnAreaTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AreaType_Area", Storage="_Areas", ThisKey="AreaType1", OtherKey="AreaType")]
		public EntitySet<Area> Areas
		{
			get
			{
				return this._Areas;
			}
			set
			{
				this._Areas.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Areas(Area entity)
		{
			this.SendPropertyChanging();
			entity.AreaType1 = this;
		}
		
		private void detach_Areas(Area entity)
		{
			this.SendPropertyChanging();
			entity.AreaType1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Class")]
	public partial class Class : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _SortSeq;
		
		private string _Classref;
		
		private string _Classname;
		
		private System.Nullable<char> _ClassType;
		
		private EntitySet<Classlink> _Classlinks;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSortSeqChanging(short value);
    partial void OnSortSeqChanged();
    partial void OnClassrefChanging(string value);
    partial void OnClassrefChanged();
    partial void OnClassnameChanging(string value);
    partial void OnClassnameChanged();
    partial void OnClassTypeChanging(System.Nullable<char> value);
    partial void OnClassTypeChanged();
    #endregion
		
		public Class()
		{
			this._Classlinks = new EntitySet<Classlink>(new Action<Classlink>(this.attach_Classlinks), new Action<Classlink>(this.detach_Classlinks));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SortSeq", DbType="SmallInt NOT NULL")]
		public short SortSeq
		{
			get
			{
				return this._SortSeq;
			}
			set
			{
				if ((this._SortSeq != value))
				{
					this.OnSortSeqChanging(value);
					this.SendPropertyChanging();
					this._SortSeq = value;
					this.SendPropertyChanged("SortSeq");
					this.OnSortSeqChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Classref", DbType="VarChar(5) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Classref
		{
			get
			{
				return this._Classref;
			}
			set
			{
				if ((this._Classref != value))
				{
					this.OnClassrefChanging(value);
					this.SendPropertyChanging();
					this._Classref = value;
					this.SendPropertyChanged("Classref");
					this.OnClassrefChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Classname", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string Classname
		{
			get
			{
				return this._Classname;
			}
			set
			{
				if ((this._Classname != value))
				{
					this.OnClassnameChanging(value);
					this.SendPropertyChanging();
					this._Classname = value;
					this.SendPropertyChanged("Classname");
					this.OnClassnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassType", DbType="Char(1)")]
		public System.Nullable<char> ClassType
		{
			get
			{
				return this._ClassType;
			}
			set
			{
				if ((this._ClassType != value))
				{
					this.OnClassTypeChanging(value);
					this.SendPropertyChanging();
					this._ClassType = value;
					this.SendPropertyChanged("ClassType");
					this.OnClassTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Class_Classlink", Storage="_Classlinks", ThisKey="Classref", OtherKey="Classref")]
		public EntitySet<Classlink> Classlinks
		{
			get
			{
				return this._Classlinks;
			}
			set
			{
				this._Classlinks.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Classlinks(Classlink entity)
		{
			this.SendPropertyChanging();
			entity.Class = this;
		}
		
		private void detach_Classlinks(Classlink entity)
		{
			this.SendPropertyChanging();
			entity.Class = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Classlink")]
	public partial class Classlink : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _Hillnumber;
		
		private string _Classref;
		
		private int _ClasslinkID;
		
		private EntityRef<Class> _Class;
		
		private EntityRef<Hill> _Hill;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnHillnumberChanging(short value);
    partial void OnHillnumberChanged();
    partial void OnClassrefChanging(string value);
    partial void OnClassrefChanged();
    partial void OnClasslinkIDChanging(int value);
    partial void OnClasslinkIDChanged();
    #endregion
		
		public Classlink()
		{
			this._Class = default(EntityRef<Class>);
			this._Hill = default(EntityRef<Hill>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hillnumber", DbType="SmallInt NOT NULL")]
		public short Hillnumber
		{
			get
			{
				return this._Hillnumber;
			}
			set
			{
				if ((this._Hillnumber != value))
				{
					if (this._Hill.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHillnumberChanging(value);
					this.SendPropertyChanging();
					this._Hillnumber = value;
					this.SendPropertyChanged("Hillnumber");
					this.OnHillnumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Classref", DbType="VarChar(5) NOT NULL", CanBeNull=false)]
		public string Classref
		{
			get
			{
				return this._Classref;
			}
			set
			{
				if ((this._Classref != value))
				{
					if (this._Class.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClassrefChanging(value);
					this.SendPropertyChanging();
					this._Classref = value;
					this.SendPropertyChanged("Classref");
					this.OnClassrefChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClasslinkID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ClasslinkID
		{
			get
			{
				return this._ClasslinkID;
			}
			set
			{
				if ((this._ClasslinkID != value))
				{
					this.OnClasslinkIDChanging(value);
					this.SendPropertyChanging();
					this._ClasslinkID = value;
					this.SendPropertyChanged("ClasslinkID");
					this.OnClasslinkIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Class_Classlink", Storage="_Class", ThisKey="Classref", OtherKey="Classref", IsForeignKey=true)]
		public Class Class
		{
			get
			{
				return this._Class.Entity;
			}
			set
			{
				Class previousValue = this._Class.Entity;
				if (((previousValue != value) 
							|| (this._Class.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Class.Entity = null;
						previousValue.Classlinks.Remove(this);
					}
					this._Class.Entity = value;
					if ((value != null))
					{
						value.Classlinks.Add(this);
						this._Classref = value.Classref;
					}
					else
					{
						this._Classref = default(string);
					}
					this.SendPropertyChanged("Class");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Hill_Classlink", Storage="_Hill", ThisKey="Hillnumber", OtherKey="Hillnumber", IsForeignKey=true)]
		public Hill Hill
		{
			get
			{
				return this._Hill.Entity;
			}
			set
			{
				Hill previousValue = this._Hill.Entity;
				if (((previousValue != value) 
							|| (this._Hill.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Hill.Entity = null;
						previousValue.Classlinks.Remove(this);
					}
					this._Hill.Entity = value;
					if ((value != null))
					{
						value.Classlinks.Add(this);
						this._Hillnumber = value.Hillnumber;
					}
					else
					{
						this._Hillnumber = default(short);
					}
					this.SendPropertyChanged("Hill");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.HillAscent")]
	public partial class HillAscent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AscentID;
		
		private System.DateTime _AscentDate;
		
		private short _Hillnumber;
		
		private int _WalkID;
		
		private EntityRef<Hill> _Hill;
		
		private EntityRef<Walk> _Walk;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAscentIDChanging(int value);
    partial void OnAscentIDChanged();
    partial void OnAscentDateChanging(System.DateTime value);
    partial void OnAscentDateChanged();
    partial void OnHillnumberChanging(short value);
    partial void OnHillnumberChanged();
    partial void OnWalkIDChanging(int value);
    partial void OnWalkIDChanged();
    #endregion
		
		public HillAscent()
		{
			this._Hill = default(EntityRef<Hill>);
			this._Walk = default(EntityRef<Walk>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AscentID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AscentID
		{
			get
			{
				return this._AscentID;
			}
			set
			{
				if ((this._AscentID != value))
				{
					this.OnAscentIDChanging(value);
					this.SendPropertyChanging();
					this._AscentID = value;
					this.SendPropertyChanged("AscentID");
					this.OnAscentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AscentDate", DbType="DateTime NOT NULL")]
		public System.DateTime AscentDate
		{
			get
			{
				return this._AscentDate;
			}
			set
			{
				if ((this._AscentDate != value))
				{
					this.OnAscentDateChanging(value);
					this.SendPropertyChanging();
					this._AscentDate = value;
					this.SendPropertyChanged("AscentDate");
					this.OnAscentDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hillnumber", DbType="SmallInt NOT NULL")]
		public short Hillnumber
		{
			get
			{
				return this._Hillnumber;
			}
			set
			{
				if ((this._Hillnumber != value))
				{
					if (this._Hill.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHillnumberChanging(value);
					this.SendPropertyChanging();
					this._Hillnumber = value;
					this.SendPropertyChanged("Hillnumber");
					this.OnHillnumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WalkID", DbType="Int NOT NULL")]
		public int WalkID
		{
			get
			{
				return this._WalkID;
			}
			set
			{
				if ((this._WalkID != value))
				{
					if (this._Walk.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWalkIDChanging(value);
					this.SendPropertyChanging();
					this._WalkID = value;
					this.SendPropertyChanged("WalkID");
					this.OnWalkIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Hill_HillAscent", Storage="_Hill", ThisKey="Hillnumber", OtherKey="Hillnumber", IsForeignKey=true)]
		public Hill Hill
		{
			get
			{
				return this._Hill.Entity;
			}
			set
			{
				Hill previousValue = this._Hill.Entity;
				if (((previousValue != value) 
							|| (this._Hill.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Hill.Entity = null;
						previousValue.HillAscents.Remove(this);
					}
					this._Hill.Entity = value;
					if ((value != null))
					{
						value.HillAscents.Add(this);
						this._Hillnumber = value.Hillnumber;
					}
					else
					{
						this._Hillnumber = default(short);
					}
					this.SendPropertyChanged("Hill");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Walk_HillAscent", Storage="_Walk", ThisKey="WalkID", OtherKey="WalkID", IsForeignKey=true)]
		public Walk Walk
		{
			get
			{
				return this._Walk.Entity;
			}
			set
			{
				Walk previousValue = this._Walk.Entity;
				if (((previousValue != value) 
							|| (this._Walk.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Walk.Entity = null;
						previousValue.HillAscents.Remove(this);
					}
					this._Walk.Entity = value;
					if ((value != null))
					{
						value.HillAscents.Add(this);
						this._WalkID = value.WalkID;
					}
					else
					{
						this._WalkID = default(int);
					}
					this.SendPropertyChanged("Walk");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Hills")]
	public partial class Hill : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _Hillnumber;
		
		private string _Hillname;
		
		private System.Nullable<double> @__Section;
		
		private string _Classification;
		
		private double _Metres;
		
		private System.Nullable<double> _Feet;
		
		private string _Gridref;
		
		private string _Gridref10;
		
		private string _Colgridref;
		
		private System.Nullable<double> _Colheight;
		
		private System.Nullable<double> _Drop;
		
		private string _Feature;
		
		private string _Observations;
		
		private string _Survey;
		
		private System.Nullable<System.DateTime> _Revision;
		
		private string _Comments;
		
		private string _Map;
		
		private string _Map25;
		
		private System.Nullable<int> _Xcoord;
		
		private System.Nullable<int> _Ycoord;
		
		private System.Nullable<double> _Latitude;
		
		private System.Nullable<double> _Longitude;
		
		private short _NumberOfAscents;
		
		private System.Nullable<System.DateTime> _FirstClimbedDate;
		
		private EntitySet<Arealink> _Arealinks;
		
		private EntitySet<Classlink> _Classlinks;
		
		private EntitySet<HillAscent> _HillAscents;
		
		private EntitySet<Marker> _Markers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnHillnumberChanging(short value);
    partial void OnHillnumberChanged();
    partial void OnHillnameChanging(string value);
    partial void OnHillnameChanged();
    partial void On_SectionChanging(System.Nullable<double> value);
    partial void On_SectionChanged();
    partial void OnClassificationChanging(string value);
    partial void OnClassificationChanged();
    partial void OnMetresChanging(double value);
    partial void OnMetresChanged();
    partial void OnFeetChanging(System.Nullable<double> value);
    partial void OnFeetChanged();
    partial void OnGridrefChanging(string value);
    partial void OnGridrefChanged();
    partial void OnGridref10Changing(string value);
    partial void OnGridref10Changed();
    partial void OnColgridrefChanging(string value);
    partial void OnColgridrefChanged();
    partial void OnColheightChanging(System.Nullable<double> value);
    partial void OnColheightChanged();
    partial void OnDropChanging(System.Nullable<double> value);
    partial void OnDropChanged();
    partial void OnFeatureChanging(string value);
    partial void OnFeatureChanged();
    partial void OnObservationsChanging(string value);
    partial void OnObservationsChanged();
    partial void OnSurveyChanging(string value);
    partial void OnSurveyChanged();
    partial void OnRevisionChanging(System.Nullable<System.DateTime> value);
    partial void OnRevisionChanged();
    partial void OnCommentsChanging(string value);
    partial void OnCommentsChanged();
    partial void OnMapChanging(string value);
    partial void OnMapChanged();
    partial void OnMap25Changing(string value);
    partial void OnMap25Changed();
    partial void OnXcoordChanging(System.Nullable<int> value);
    partial void OnXcoordChanged();
    partial void OnYcoordChanging(System.Nullable<int> value);
    partial void OnYcoordChanged();
    partial void OnLatitudeChanging(System.Nullable<double> value);
    partial void OnLatitudeChanged();
    partial void OnLongitudeChanging(System.Nullable<double> value);
    partial void OnLongitudeChanged();
    partial void OnNumberOfAscentsChanging(short value);
    partial void OnNumberOfAscentsChanged();
    partial void OnFirstClimbedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnFirstClimbedDateChanged();
    #endregion
		
		public Hill()
		{
			this._Arealinks = new EntitySet<Arealink>(new Action<Arealink>(this.attach_Arealinks), new Action<Arealink>(this.detach_Arealinks));
			this._Classlinks = new EntitySet<Classlink>(new Action<Classlink>(this.attach_Classlinks), new Action<Classlink>(this.detach_Classlinks));
			this._HillAscents = new EntitySet<HillAscent>(new Action<HillAscent>(this.attach_HillAscents), new Action<HillAscent>(this.detach_HillAscents));
			this._Markers = new EntitySet<Marker>(new Action<Marker>(this.attach_Markers), new Action<Marker>(this.detach_Markers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hillnumber", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short Hillnumber
		{
			get
			{
				return this._Hillnumber;
			}
			set
			{
				if ((this._Hillnumber != value))
				{
					this.OnHillnumberChanging(value);
					this.SendPropertyChanging();
					this._Hillnumber = value;
					this.SendPropertyChanged("Hillnumber");
					this.OnHillnumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hillname", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Hillname
		{
			get
			{
				return this._Hillname;
			}
			set
			{
				if ((this._Hillname != value))
				{
					this.OnHillnameChanging(value);
					this.SendPropertyChanging();
					this._Hillname = value;
					this.SendPropertyChanged("Hillname");
					this.OnHillnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[_Section]", Storage="__Section", DbType="Float")]
		public System.Nullable<double> _Section
		{
			get
			{
				return this.@__Section;
			}
			set
			{
				if ((this.@__Section != value))
				{
					this.On_SectionChanging(value);
					this.SendPropertyChanging();
					this.@__Section = value;
					this.SendPropertyChanged("_Section");
					this.On_SectionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Classification", DbType="NVarChar(255)")]
		public string Classification
		{
			get
			{
				return this._Classification;
			}
			set
			{
				if ((this._Classification != value))
				{
					this.OnClassificationChanging(value);
					this.SendPropertyChanging();
					this._Classification = value;
					this.SendPropertyChanged("Classification");
					this.OnClassificationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Metres", DbType="Float NOT NULL")]
		public double Metres
		{
			get
			{
				return this._Metres;
			}
			set
			{
				if ((this._Metres != value))
				{
					this.OnMetresChanging(value);
					this.SendPropertyChanging();
					this._Metres = value;
					this.SendPropertyChanged("Metres");
					this.OnMetresChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Feet", DbType="Float")]
		public System.Nullable<double> Feet
		{
			get
			{
				return this._Feet;
			}
			set
			{
				if ((this._Feet != value))
				{
					this.OnFeetChanging(value);
					this.SendPropertyChanging();
					this._Feet = value;
					this.SendPropertyChanged("Feet");
					this.OnFeetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gridref", DbType="NVarChar(8)")]
		public string Gridref
		{
			get
			{
				return this._Gridref;
			}
			set
			{
				if ((this._Gridref != value))
				{
					this.OnGridrefChanging(value);
					this.SendPropertyChanging();
					this._Gridref = value;
					this.SendPropertyChanged("Gridref");
					this.OnGridrefChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gridref10", DbType="NVarChar(14)")]
		public string Gridref10
		{
			get
			{
				return this._Gridref10;
			}
			set
			{
				if ((this._Gridref10 != value))
				{
					this.OnGridref10Changing(value);
					this.SendPropertyChanging();
					this._Gridref10 = value;
					this.SendPropertyChanged("Gridref10");
					this.OnGridref10Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Colgridref", DbType="NVarChar(40)")]
		public string Colgridref
		{
			get
			{
				return this._Colgridref;
			}
			set
			{
				if ((this._Colgridref != value))
				{
					this.OnColgridrefChanging(value);
					this.SendPropertyChanging();
					this._Colgridref = value;
					this.SendPropertyChanged("Colgridref");
					this.OnColgridrefChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Colheight", DbType="Float")]
		public System.Nullable<double> Colheight
		{
			get
			{
				return this._Colheight;
			}
			set
			{
				if ((this._Colheight != value))
				{
					this.OnColheightChanging(value);
					this.SendPropertyChanging();
					this._Colheight = value;
					this.SendPropertyChanged("Colheight");
					this.OnColheightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Drop]", Storage="_Drop", DbType="Float")]
		public System.Nullable<double> Drop
		{
			get
			{
				return this._Drop;
			}
			set
			{
				if ((this._Drop != value))
				{
					this.OnDropChanging(value);
					this.SendPropertyChanging();
					this._Drop = value;
					this.SendPropertyChanged("Drop");
					this.OnDropChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Feature", DbType="NVarChar(255)")]
		public string Feature
		{
			get
			{
				return this._Feature;
			}
			set
			{
				if ((this._Feature != value))
				{
					this.OnFeatureChanging(value);
					this.SendPropertyChanging();
					this._Feature = value;
					this.SendPropertyChanged("Feature");
					this.OnFeatureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Observations", DbType="NVarChar(255)")]
		public string Observations
		{
			get
			{
				return this._Observations;
			}
			set
			{
				if ((this._Observations != value))
				{
					this.OnObservationsChanging(value);
					this.SendPropertyChanging();
					this._Observations = value;
					this.SendPropertyChanged("Observations");
					this.OnObservationsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Survey", DbType="NVarChar(255)")]
		public string Survey
		{
			get
			{
				return this._Survey;
			}
			set
			{
				if ((this._Survey != value))
				{
					this.OnSurveyChanging(value);
					this.SendPropertyChanging();
					this._Survey = value;
					this.SendPropertyChanged("Survey");
					this.OnSurveyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Revision", DbType="DateTime")]
		public System.Nullable<System.DateTime> Revision
		{
			get
			{
				return this._Revision;
			}
			set
			{
				if ((this._Revision != value))
				{
					this.OnRevisionChanging(value);
					this.SendPropertyChanging();
					this._Revision = value;
					this.SendPropertyChanged("Revision");
					this.OnRevisionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comments", DbType="NVarChar(255)")]
		public string Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				if ((this._Comments != value))
				{
					this.OnCommentsChanging(value);
					this.SendPropertyChanging();
					this._Comments = value;
					this.SendPropertyChanged("Comments");
					this.OnCommentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Map", DbType="NVarChar(15)")]
		public string Map
		{
			get
			{
				return this._Map;
			}
			set
			{
				if ((this._Map != value))
				{
					this.OnMapChanging(value);
					this.SendPropertyChanging();
					this._Map = value;
					this.SendPropertyChanged("Map");
					this.OnMapChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Map25", DbType="NVarChar(20)")]
		public string Map25
		{
			get
			{
				return this._Map25;
			}
			set
			{
				if ((this._Map25 != value))
				{
					this.OnMap25Changing(value);
					this.SendPropertyChanging();
					this._Map25 = value;
					this.SendPropertyChanged("Map25");
					this.OnMap25Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Xcoord", DbType="Int")]
		public System.Nullable<int> Xcoord
		{
			get
			{
				return this._Xcoord;
			}
			set
			{
				if ((this._Xcoord != value))
				{
					this.OnXcoordChanging(value);
					this.SendPropertyChanging();
					this._Xcoord = value;
					this.SendPropertyChanged("Xcoord");
					this.OnXcoordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ycoord", DbType="Int")]
		public System.Nullable<int> Ycoord
		{
			get
			{
				return this._Ycoord;
			}
			set
			{
				if ((this._Ycoord != value))
				{
					this.OnYcoordChanging(value);
					this.SendPropertyChanging();
					this._Ycoord = value;
					this.SendPropertyChanged("Ycoord");
					this.OnYcoordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Latitude", DbType="Float")]
		public System.Nullable<double> Latitude
		{
			get
			{
				return this._Latitude;
			}
			set
			{
				if ((this._Latitude != value))
				{
					this.OnLatitudeChanging(value);
					this.SendPropertyChanging();
					this._Latitude = value;
					this.SendPropertyChanged("Latitude");
					this.OnLatitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Longitude", DbType="Float")]
		public System.Nullable<double> Longitude
		{
			get
			{
				return this._Longitude;
			}
			set
			{
				if ((this._Longitude != value))
				{
					this.OnLongitudeChanging(value);
					this.SendPropertyChanging();
					this._Longitude = value;
					this.SendPropertyChanged("Longitude");
					this.OnLongitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberOfAscents", DbType="SmallInt NOT NULL")]
		public short NumberOfAscents
		{
			get
			{
				return this._NumberOfAscents;
			}
			set
			{
				if ((this._NumberOfAscents != value))
				{
					this.OnNumberOfAscentsChanging(value);
					this.SendPropertyChanging();
					this._NumberOfAscents = value;
					this.SendPropertyChanged("NumberOfAscents");
					this.OnNumberOfAscentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstClimbedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> FirstClimbedDate
		{
			get
			{
				return this._FirstClimbedDate;
			}
			set
			{
				if ((this._FirstClimbedDate != value))
				{
					this.OnFirstClimbedDateChanging(value);
					this.SendPropertyChanging();
					this._FirstClimbedDate = value;
					this.SendPropertyChanged("FirstClimbedDate");
					this.OnFirstClimbedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Hill_Arealink", Storage="_Arealinks", ThisKey="Hillnumber", OtherKey="Hillnumber")]
		public EntitySet<Arealink> Arealinks
		{
			get
			{
				return this._Arealinks;
			}
			set
			{
				this._Arealinks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Hill_Classlink", Storage="_Classlinks", ThisKey="Hillnumber", OtherKey="Hillnumber")]
		public EntitySet<Classlink> Classlinks
		{
			get
			{
				return this._Classlinks;
			}
			set
			{
				this._Classlinks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Hill_HillAscent", Storage="_HillAscents", ThisKey="Hillnumber", OtherKey="Hillnumber")]
		public EntitySet<HillAscent> HillAscents
		{
			get
			{
				return this._HillAscents;
			}
			set
			{
				this._HillAscents.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Hill_Marker", Storage="_Markers", ThisKey="Hillnumber", OtherKey="Hillnumber")]
		public EntitySet<Marker> Markers
		{
			get
			{
				return this._Markers;
			}
			set
			{
				this._Markers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Arealinks(Arealink entity)
		{
			this.SendPropertyChanging();
			entity.Hill = this;
		}
		
		private void detach_Arealinks(Arealink entity)
		{
			this.SendPropertyChanging();
			entity.Hill = null;
		}
		
		private void attach_Classlinks(Classlink entity)
		{
			this.SendPropertyChanging();
			entity.Hill = this;
		}
		
		private void detach_Classlinks(Classlink entity)
		{
			this.SendPropertyChanging();
			entity.Hill = null;
		}
		
		private void attach_HillAscents(HillAscent entity)
		{
			this.SendPropertyChanging();
			entity.Hill = this;
		}
		
		private void detach_HillAscents(HillAscent entity)
		{
			this.SendPropertyChanging();
			entity.Hill = null;
		}
		
		private void attach_Markers(Marker entity)
		{
			this.SendPropertyChanging();
			entity.Hill = this;
		}
		
		private void detach_Markers(Marker entity)
		{
			this.SendPropertyChanging();
			entity.Hill = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Marker")]
	public partial class Marker : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MarkerID;
		
		private string _MarkerTitle;
		
		private System.Nullable<short> _Hillnumber;
		
		private string _GPS_Reference;
		
		private string _Location_Description;
		
		private System.Nullable<int> _WalkID;
		
		private System.DateTime _DateLeft;
		
		private string _Status;
		
		private EntitySet<Marker_Observation> _Marker_Observations;
		
		private EntitySet<Walk_AssociatedFile> _Walk_AssociatedFiles;
		
		private EntityRef<Hill> _Hill;
		
		private EntityRef<Marker_Status> _Marker_Status;
		
		private EntityRef<Walk> _Walk;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMarkerIDChanging(int value);
    partial void OnMarkerIDChanged();
    partial void OnMarkerTitleChanging(string value);
    partial void OnMarkerTitleChanged();
    partial void OnHillnumberChanging(System.Nullable<short> value);
    partial void OnHillnumberChanged();
    partial void OnGPS_ReferenceChanging(string value);
    partial void OnGPS_ReferenceChanged();
    partial void OnLocation_DescriptionChanging(string value);
    partial void OnLocation_DescriptionChanged();
    partial void OnWalkIDChanging(System.Nullable<int> value);
    partial void OnWalkIDChanged();
    partial void OnDateLeftChanging(System.DateTime value);
    partial void OnDateLeftChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    #endregion
		
		public Marker()
		{
			this._Marker_Observations = new EntitySet<Marker_Observation>(new Action<Marker_Observation>(this.attach_Marker_Observations), new Action<Marker_Observation>(this.detach_Marker_Observations));
			this._Walk_AssociatedFiles = new EntitySet<Walk_AssociatedFile>(new Action<Walk_AssociatedFile>(this.attach_Walk_AssociatedFiles), new Action<Walk_AssociatedFile>(this.detach_Walk_AssociatedFiles));
			this._Hill = default(EntityRef<Hill>);
			this._Marker_Status = default(EntityRef<Marker_Status>);
			this._Walk = default(EntityRef<Walk>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MarkerID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MarkerID
		{
			get
			{
				return this._MarkerID;
			}
			set
			{
				if ((this._MarkerID != value))
				{
					this.OnMarkerIDChanging(value);
					this.SendPropertyChanging();
					this._MarkerID = value;
					this.SendPropertyChanged("MarkerID");
					this.OnMarkerIDChanged();
				}
			}
		}
		
        [DisplayName("Marker Title")]
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MarkerTitle", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string MarkerTitle
		{
			get
			{
				return this._MarkerTitle;
			}
			set
			{
				if ((this._MarkerTitle != value))
				{
					this.OnMarkerTitleChanging(value);
					this.SendPropertyChanging();
					this._MarkerTitle = value;
					this.SendPropertyChanged("MarkerTitle");
					this.OnMarkerTitleChanged();
				}
			}
		}

        [DisplayName("Hill on which marker was left")]
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hillnumber", DbType="SmallInt")]
		public System.Nullable<short> Hillnumber
		{
			get
			{
				return this._Hillnumber;
			}
			set
			{
				if ((this._Hillnumber != value))
				{
					if (this._Hill.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHillnumberChanging(value);
					this.SendPropertyChanging();
					this._Hillnumber = value;
					this.SendPropertyChanged("Hillnumber");
					this.OnHillnumberChanged();
				}
			}
		}

        [DisplayName("GPS Reference of marker location")]
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GPS_Reference", DbType="NChar(14)")]
		public string GPS_Reference
		{
			get
			{
				return this._GPS_Reference;
			}
			set
			{
				if ((this._GPS_Reference != value))
				{
					this.OnGPS_ReferenceChanging(value);
					this.SendPropertyChanging();
					this._GPS_Reference = value;
					this.SendPropertyChanged("GPS_Reference");
					this.OnGPS_ReferenceChanged();
				}
			}
		}

        [DisplayName("Description of marker locaton")]
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Location_Description", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Location_Description
		{
			get
			{
				return this._Location_Description;
			}
			set
			{
				if ((this._Location_Description != value))
				{
					this.OnLocation_DescriptionChanging(value);
					this.SendPropertyChanging();
					this._Location_Description = value;
					this.SendPropertyChanged("Location_Description");
					this.OnLocation_DescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WalkID", DbType="Int")]
		public System.Nullable<int> WalkID
		{
			get
			{
				return this._WalkID;
			}
			set
			{
				if ((this._WalkID != value))
				{
					if (this._Walk.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWalkIDChanging(value);
					this.SendPropertyChanging();
					this._WalkID = value;
					this.SendPropertyChanged("WalkID");
					this.OnWalkIDChanged();
				}
			}
		}

        [DisplayName("Date Marker was set up")]
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateLeft", DbType="DateTime NOT NULL")]
		public System.DateTime DateLeft
		{
			get
			{
				return this._DateLeft;
			}
			set
			{
				if ((this._DateLeft != value))
				{
					this.OnDateLeftChanging(value);
					this.SendPropertyChanging();
					this._DateLeft = value;
					this.SendPropertyChanged("DateLeft");
					this.OnDateLeftChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="NChar(40) NOT NULL", CanBeNull=false)]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					if (this._Marker_Status.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Marker_Marker_Observation", Storage="_Marker_Observations", ThisKey="MarkerID", OtherKey="MarkerID")]
		public EntitySet<Marker_Observation> Marker_Observations
		{
			get
			{
				return this._Marker_Observations;
			}
			set
			{
				this._Marker_Observations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Marker_Walk_AssociatedFile", Storage="_Walk_AssociatedFiles", ThisKey="MarkerID", OtherKey="Walk_AssociatedFile_MarkerID")]
		public EntitySet<Walk_AssociatedFile> Walk_AssociatedFiles
		{
			get
			{
				return this._Walk_AssociatedFiles;
			}
			set
			{
				this._Walk_AssociatedFiles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Hill_Marker", Storage="_Hill", ThisKey="Hillnumber", OtherKey="Hillnumber", IsForeignKey=true)]
		public Hill Hill
		{
			get
			{
				return this._Hill.Entity;
			}
			set
			{
				Hill previousValue = this._Hill.Entity;
				if (((previousValue != value) 
							|| (this._Hill.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Hill.Entity = null;
						previousValue.Markers.Remove(this);
					}
					this._Hill.Entity = value;
					if ((value != null))
					{
						value.Markers.Add(this);
						this._Hillnumber = value.Hillnumber;
					}
					else
					{
						this._Hillnumber = default(Nullable<short>);
					}
					this.SendPropertyChanged("Hill");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Marker_Status_Marker", Storage="_Marker_Status", ThisKey="Status", OtherKey="Marker_Status1", IsForeignKey=true)]
		public Marker_Status Marker_Status
		{
			get
			{
				return this._Marker_Status.Entity;
			}
			set
			{
				Marker_Status previousValue = this._Marker_Status.Entity;
				if (((previousValue != value) 
							|| (this._Marker_Status.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Marker_Status.Entity = null;
						previousValue.Markers.Remove(this);
					}
					this._Marker_Status.Entity = value;
					if ((value != null))
					{
						value.Markers.Add(this);
						this._Status = value.Marker_Status1;
					}
					else
					{
						this._Status = default(string);
					}
					this.SendPropertyChanged("Marker_Status");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Walk_Marker", Storage="_Walk", ThisKey="WalkID", OtherKey="WalkID", IsForeignKey=true)]
		public Walk Walk
		{
			get
			{
				return this._Walk.Entity;
			}
			set
			{
				Walk previousValue = this._Walk.Entity;
				if (((previousValue != value) 
							|| (this._Walk.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Walk.Entity = null;
						previousValue.Markers.Remove(this);
					}
					this._Walk.Entity = value;
					if ((value != null))
					{
						value.Markers.Add(this);
						this._WalkID = value.WalkID;
					}
					else
					{
						this._WalkID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Walk");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Marker_Observations(Marker_Observation entity)
		{
			this.SendPropertyChanging();
			entity.Marker = this;
		}
		
		private void detach_Marker_Observations(Marker_Observation entity)
		{
			this.SendPropertyChanging();
			entity.Marker = null;
		}
		
		private void attach_Walk_AssociatedFiles(Walk_AssociatedFile entity)
		{
			this.SendPropertyChanging();
			entity.Marker = this;
		}
		
		private void detach_Walk_AssociatedFiles(Walk_AssociatedFile entity)
		{
			this.SendPropertyChanging();
			entity.Marker = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Marker_Observation")]
	public partial class Marker_Observation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MarkerObservationID;
		
		private int _MarkerID;
		
		private bool _FoundFlag;
		
		private int _WalkID;
		
		private string _ObservationText;
		
		private System.DateTime _DateOfObservation;
		
		private EntityRef<Marker> _Marker;
		
		private EntityRef<Walk> _Walk;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMarkerObservationIDChanging(int value);
    partial void OnMarkerObservationIDChanged();
    partial void OnMarkerIDChanging(int value);
    partial void OnMarkerIDChanged();
    partial void OnFoundFlagChanging(bool value);
    partial void OnFoundFlagChanged();
    partial void OnWalkIDChanging(int value);
    partial void OnWalkIDChanged();
    partial void OnObservationTextChanging(string value);
    partial void OnObservationTextChanged();
    partial void OnDateOfObservationChanging(System.DateTime value);
    partial void OnDateOfObservationChanged();
    #endregion
		
		public Marker_Observation()
		{
			this._Marker = default(EntityRef<Marker>);
			this._Walk = default(EntityRef<Walk>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MarkerObservationID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MarkerObservationID
		{
			get
			{
				return this._MarkerObservationID;
			}
			set
			{
				if ((this._MarkerObservationID != value))
				{
					this.OnMarkerObservationIDChanging(value);
					this.SendPropertyChanging();
					this._MarkerObservationID = value;
					this.SendPropertyChanged("MarkerObservationID");
					this.OnMarkerObservationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MarkerID", DbType="Int NOT NULL")]
		public int MarkerID
		{
			get
			{
				return this._MarkerID;
			}
			set
			{
				if ((this._MarkerID != value))
				{
					if (this._Marker.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMarkerIDChanging(value);
					this.SendPropertyChanging();
					this._MarkerID = value;
					this.SendPropertyChanged("MarkerID");
					this.OnMarkerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FoundFlag", DbType="Bit NOT NULL")]
		public bool FoundFlag
		{
			get
			{
				return this._FoundFlag;
			}
			set
			{
				if ((this._FoundFlag != value))
				{
					this.OnFoundFlagChanging(value);
					this.SendPropertyChanging();
					this._FoundFlag = value;
					this.SendPropertyChanged("FoundFlag");
					this.OnFoundFlagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WalkID", DbType="Int NOT NULL")]
		public int WalkID
		{
			get
			{
				return this._WalkID;
			}
			set
			{
				if ((this._WalkID != value))
				{
					if (this._Walk.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWalkIDChanging(value);
					this.SendPropertyChanging();
					this._WalkID = value;
					this.SendPropertyChanged("WalkID");
					this.OnWalkIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObservationText", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string ObservationText
		{
			get
			{
				return this._ObservationText;
			}
			set
			{
				if ((this._ObservationText != value))
				{
					this.OnObservationTextChanging(value);
					this.SendPropertyChanging();
					this._ObservationText = value;
					this.SendPropertyChanged("ObservationText");
					this.OnObservationTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfObservation", DbType="DateTime NOT NULL")]
		public System.DateTime DateOfObservation
		{
			get
			{
				return this._DateOfObservation;
			}
			set
			{
				if ((this._DateOfObservation != value))
				{
					this.OnDateOfObservationChanging(value);
					this.SendPropertyChanging();
					this._DateOfObservation = value;
					this.SendPropertyChanged("DateOfObservation");
					this.OnDateOfObservationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Marker_Marker_Observation", Storage="_Marker", ThisKey="MarkerID", OtherKey="MarkerID", IsForeignKey=true)]
		public Marker Marker
		{
			get
			{
				return this._Marker.Entity;
			}
			set
			{
				Marker previousValue = this._Marker.Entity;
				if (((previousValue != value) 
							|| (this._Marker.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Marker.Entity = null;
						previousValue.Marker_Observations.Remove(this);
					}
					this._Marker.Entity = value;
					if ((value != null))
					{
						value.Marker_Observations.Add(this);
						this._MarkerID = value.MarkerID;
					}
					else
					{
						this._MarkerID = default(int);
					}
					this.SendPropertyChanged("Marker");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Walk_Marker_Observation", Storage="_Walk", ThisKey="WalkID", OtherKey="WalkID", IsForeignKey=true)]
		public Walk Walk
		{
			get
			{
				return this._Walk.Entity;
			}
			set
			{
				Walk previousValue = this._Walk.Entity;
				if (((previousValue != value) 
							|| (this._Walk.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Walk.Entity = null;
						previousValue.Marker_Observations.Remove(this);
					}
					this._Walk.Entity = value;
					if ((value != null))
					{
						value.Marker_Observations.Add(this);
						this._WalkID = value.WalkID;
					}
					else
					{
						this._WalkID = default(int);
					}
					this.SendPropertyChanged("Walk");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Marker_Status")]
	public partial class Marker_Status : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Marker_Status1;
		
		private EntitySet<Marker> _Markers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMarker_Status1Changing(string value);
    partial void OnMarker_Status1Changed();
    #endregion
		
		public Marker_Status()
		{
			this._Markers = new EntitySet<Marker>(new Action<Marker>(this.attach_Markers), new Action<Marker>(this.detach_Markers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Marker_Status", Storage="_Marker_Status1", DbType="NChar(40) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Marker_Status1
		{
			get
			{
				return this._Marker_Status1;
			}
			set
			{
				if ((this._Marker_Status1 != value))
				{
					this.OnMarker_Status1Changing(value);
					this.SendPropertyChanging();
					this._Marker_Status1 = value;
					this.SendPropertyChanged("Marker_Status1");
					this.OnMarker_Status1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Marker_Status_Marker", Storage="_Markers", ThisKey="Marker_Status1", OtherKey="Status")]
		public EntitySet<Marker> Markers
		{
			get
			{
				return this._Markers;
			}
			set
			{
				this._Markers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Markers(Marker entity)
		{
			this.SendPropertyChanging();
			entity.Marker_Status = this;
		}
		
		private void detach_Markers(Marker entity)
		{
			this.SendPropertyChanging();
			entity.Marker_Status = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MarylynParentChild")]
	public partial class MarylynParentChild
	{
		
		private int _MarlylnParentChildID;
		
		private string _ParentRegionAreaRef;
		
		private string _ChildRegionAreaRef;
		
		public MarylynParentChild()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MarlylnParentChildID", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		public int MarlylnParentChildID
		{
			get
			{
				return this._MarlylnParentChildID;
			}
			set
			{
				if ((this._MarlylnParentChildID != value))
				{
					this._MarlylnParentChildID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentRegionAreaRef", DbType="Char(10) NOT NULL", CanBeNull=false)]
		public string ParentRegionAreaRef
		{
			get
			{
				return this._ParentRegionAreaRef;
			}
			set
			{
				if ((this._ParentRegionAreaRef != value))
				{
					this._ParentRegionAreaRef = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChildRegionAreaRef", DbType="Char(10) NOT NULL", CanBeNull=false)]
		public string ChildRegionAreaRef
		{
			get
			{
				return this._ChildRegionAreaRef;
			}
			set
			{
				if ((this._ChildRegionAreaRef != value))
				{
					this._ChildRegionAreaRef = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Walk_AssociatedFile_Types")]
	public partial class Walk_AssociatedFile_Type : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Walk_AssociatedFile_Type1;
		
		private EntitySet<Walk_AssociatedFile> _Walk_AssociatedFiles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnWalk_AssociatedFile_Type1Changing(string value);
    partial void OnWalk_AssociatedFile_Type1Changed();
    #endregion
		
		public Walk_AssociatedFile_Type()
		{
			this._Walk_AssociatedFiles = new EntitySet<Walk_AssociatedFile>(new Action<Walk_AssociatedFile>(this.attach_Walk_AssociatedFiles), new Action<Walk_AssociatedFile>(this.detach_Walk_AssociatedFiles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Walk_AssociatedFile_Type", Storage="_Walk_AssociatedFile_Type1", DbType="VarChar(40) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Walk_AssociatedFile_Type1
		{
			get
			{
				return this._Walk_AssociatedFile_Type1;
			}
			set
			{
				if ((this._Walk_AssociatedFile_Type1 != value))
				{
					this.OnWalk_AssociatedFile_Type1Changing(value);
					this.SendPropertyChanging();
					this._Walk_AssociatedFile_Type1 = value;
					this.SendPropertyChanged("Walk_AssociatedFile_Type1");
					this.OnWalk_AssociatedFile_Type1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Walk_AssociatedFile_Type_Walk_AssociatedFile", Storage="_Walk_AssociatedFiles", ThisKey="Walk_AssociatedFile_Type1", OtherKey="Walk_AssociatedFile_Type")]
		public EntitySet<Walk_AssociatedFile> Walk_AssociatedFiles
		{
			get
			{
				return this._Walk_AssociatedFiles;
			}
			set
			{
				this._Walk_AssociatedFiles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Walk_AssociatedFiles(Walk_AssociatedFile entity)
		{
			this.SendPropertyChanging();
			entity.Walk_AssociatedFile_Type1 = this;
		}
		
		private void detach_Walk_AssociatedFiles(Walk_AssociatedFile entity)
		{
			this.SendPropertyChanging();
			entity.Walk_AssociatedFile_Type1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Walk_AssociatedFiles")]
	public partial class Walk_AssociatedFile : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Walk_AssociatedFileID;
		
		private int _WalkID;
		
		private string _Walk_AssociatedFile_Name;
		
		private string _Walk_AssociatedFile_Type;
		
		private short _Walk_AssociatedFile_Sequence;
		
		private string _Walk_AssociatedFile_Caption;
		
		private System.Nullable<int> _Walk_AssociatedFile_MarkerID;
		
		private EntityRef<Marker> _Marker;
		
		private EntityRef<Walk_AssociatedFile_Type> _Walk_AssociatedFile_Type1;
		
		private EntityRef<Walk> _Walk;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnWalk_AssociatedFileIDChanging(int value);
    partial void OnWalk_AssociatedFileIDChanged();
    partial void OnWalkIDChanging(int value);
    partial void OnWalkIDChanged();
    partial void OnWalk_AssociatedFile_NameChanging(string value);
    partial void OnWalk_AssociatedFile_NameChanged();
    partial void OnWalk_AssociatedFile_TypeChanging(string value);
    partial void OnWalk_AssociatedFile_TypeChanged();
    partial void OnWalk_AssociatedFile_SequenceChanging(short value);
    partial void OnWalk_AssociatedFile_SequenceChanged();
    partial void OnWalk_AssociatedFile_CaptionChanging(string value);
    partial void OnWalk_AssociatedFile_CaptionChanged();
    partial void OnWalk_AssociatedFile_MarkerIDChanging(System.Nullable<int> value);
    partial void OnWalk_AssociatedFile_MarkerIDChanged();
    #endregion
		
		public Walk_AssociatedFile()
		{
			this._Marker = default(EntityRef<Marker>);
			this._Walk_AssociatedFile_Type1 = default(EntityRef<Walk_AssociatedFile_Type>);
			this._Walk = default(EntityRef<Walk>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Walk_AssociatedFileID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Walk_AssociatedFileID
		{
			get
			{
				return this._Walk_AssociatedFileID;
			}
			set
			{
				if ((this._Walk_AssociatedFileID != value))
				{
					this.OnWalk_AssociatedFileIDChanging(value);
					this.SendPropertyChanging();
					this._Walk_AssociatedFileID = value;
					this.SendPropertyChanged("Walk_AssociatedFileID");
					this.OnWalk_AssociatedFileIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WalkID", DbType="Int NOT NULL")]
		public int WalkID
		{
			get
			{
				return this._WalkID;
			}
			set
			{
				if ((this._WalkID != value))
				{
					if (this._Walk.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWalkIDChanging(value);
					this.SendPropertyChanging();
					this._WalkID = value;
					this.SendPropertyChanged("WalkID");
					this.OnWalkIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Walk_AssociatedFile_Name", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string Walk_AssociatedFile_Name
		{
			get
			{
				return this._Walk_AssociatedFile_Name;
			}
			set
			{
				if ((this._Walk_AssociatedFile_Name != value))
				{
					this.OnWalk_AssociatedFile_NameChanging(value);
					this.SendPropertyChanging();
					this._Walk_AssociatedFile_Name = value;
					this.SendPropertyChanged("Walk_AssociatedFile_Name");
					this.OnWalk_AssociatedFile_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Walk_AssociatedFile_Type", DbType="VarChar(40) NOT NULL", CanBeNull=false)]
		public string Walk_AssociatedFile_Type
		{
			get
			{
				return this._Walk_AssociatedFile_Type;
			}
			set
			{
				if ((this._Walk_AssociatedFile_Type != value))
				{
					if (this._Walk_AssociatedFile_Type1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWalk_AssociatedFile_TypeChanging(value);
					this.SendPropertyChanging();
					this._Walk_AssociatedFile_Type = value;
					this.SendPropertyChanged("Walk_AssociatedFile_Type");
					this.OnWalk_AssociatedFile_TypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Walk_AssociatedFile_Sequence", DbType="SmallInt NOT NULL")]
		public short Walk_AssociatedFile_Sequence
		{
			get
			{
				return this._Walk_AssociatedFile_Sequence;
			}
			set
			{
				if ((this._Walk_AssociatedFile_Sequence != value))
				{
					this.OnWalk_AssociatedFile_SequenceChanging(value);
					this.SendPropertyChanging();
					this._Walk_AssociatedFile_Sequence = value;
					this.SendPropertyChanged("Walk_AssociatedFile_Sequence");
					this.OnWalk_AssociatedFile_SequenceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Walk_AssociatedFile_Caption", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Walk_AssociatedFile_Caption
		{
			get
			{
				return this._Walk_AssociatedFile_Caption;
			}
			set
			{
				if ((this._Walk_AssociatedFile_Caption != value))
				{
					this.OnWalk_AssociatedFile_CaptionChanging(value);
					this.SendPropertyChanging();
					this._Walk_AssociatedFile_Caption = value;
					this.SendPropertyChanged("Walk_AssociatedFile_Caption");
					this.OnWalk_AssociatedFile_CaptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Walk_AssociatedFile_MarkerID", DbType="Int")]
		public System.Nullable<int> Walk_AssociatedFile_MarkerID
		{
			get
			{
				return this._Walk_AssociatedFile_MarkerID;
			}
			set
			{
				if ((this._Walk_AssociatedFile_MarkerID != value))
				{
					if (this._Marker.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWalk_AssociatedFile_MarkerIDChanging(value);
					this.SendPropertyChanging();
					this._Walk_AssociatedFile_MarkerID = value;
					this.SendPropertyChanged("Walk_AssociatedFile_MarkerID");
					this.OnWalk_AssociatedFile_MarkerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Marker_Walk_AssociatedFile", Storage="_Marker", ThisKey="Walk_AssociatedFile_MarkerID", OtherKey="MarkerID", IsForeignKey=true)]
		public Marker Marker
		{
			get
			{
				return this._Marker.Entity;
			}
			set
			{
				Marker previousValue = this._Marker.Entity;
				if (((previousValue != value) 
							|| (this._Marker.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Marker.Entity = null;
						previousValue.Walk_AssociatedFiles.Remove(this);
					}
					this._Marker.Entity = value;
					if ((value != null))
					{
						value.Walk_AssociatedFiles.Add(this);
						this._Walk_AssociatedFile_MarkerID = value.MarkerID;
					}
					else
					{
						this._Walk_AssociatedFile_MarkerID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Marker");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Walk_AssociatedFile_Type_Walk_AssociatedFile", Storage="_Walk_AssociatedFile_Type1", ThisKey="Walk_AssociatedFile_Type", OtherKey="Walk_AssociatedFile_Type1", IsForeignKey=true)]
		public Walk_AssociatedFile_Type Walk_AssociatedFile_Type1
		{
			get
			{
				return this._Walk_AssociatedFile_Type1.Entity;
			}
			set
			{
				Walk_AssociatedFile_Type previousValue = this._Walk_AssociatedFile_Type1.Entity;
				if (((previousValue != value) 
							|| (this._Walk_AssociatedFile_Type1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Walk_AssociatedFile_Type1.Entity = null;
						previousValue.Walk_AssociatedFiles.Remove(this);
					}
					this._Walk_AssociatedFile_Type1.Entity = value;
					if ((value != null))
					{
						value.Walk_AssociatedFiles.Add(this);
						this._Walk_AssociatedFile_Type = value.Walk_AssociatedFile_Type1;
					}
					else
					{
						this._Walk_AssociatedFile_Type = default(string);
					}
					this.SendPropertyChanged("Walk_AssociatedFile_Type1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Walk_Walk_AssociatedFile", Storage="_Walk", ThisKey="WalkID", OtherKey="WalkID", IsForeignKey=true)]
		public Walk Walk
		{
			get
			{
				return this._Walk.Entity;
			}
			set
			{
				Walk previousValue = this._Walk.Entity;
				if (((previousValue != value) 
							|| (this._Walk.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Walk.Entity = null;
						previousValue.Walk_AssociatedFiles.Remove(this);
					}
					this._Walk.Entity = value;
					if ((value != null))
					{
						value.Walk_AssociatedFiles.Add(this);
						this._WalkID = value.WalkID;
					}
					else
					{
						this._WalkID = default(int);
					}
					this.SendPropertyChanged("Walk");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Walks")]
	public partial class Walk : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _WalkID;
		
		private System.DateTime _WalkDate;
		
		private string _WalkDescription;
		
		private string _WalkTitle;
		
		private string _WalkSummary;
		
		private string _WalkStartPoint;
		
		private string _WalkEndPoint;
		
		private string _WalkType;
		
		private string _WalkAreaName;
		
		private System.Nullable<double> _CartographicLength;
		
		private System.Nullable<short> _MetresOfAscent;
		
		private string _WalkCompanions;
		
		private System.Nullable<int> _WalkTotalTime;
		
		private System.Nullable<double> _WalkAverageSpeedKmh;
		
		private System.Nullable<double> _MovingAverageKmh;
		
		private string _WalkConditions;
		
		private EntitySet<HillAscent> _HillAscents;
		
		private EntitySet<Marker> _Markers;
		
		private EntitySet<Marker_Observation> _Marker_Observations;
		
		private EntitySet<Walk_AssociatedFile> _Walk_AssociatedFiles;
		
		private EntityRef<Area> _Area;
		
		private EntityRef<WalkType> _WalkType1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnWalkIDChanging(int value);
    partial void OnWalkIDChanged();
    partial void OnWalkDateChanging(System.DateTime value);
    partial void OnWalkDateChanged();
    partial void OnWalkDescriptionChanging(string value);
    partial void OnWalkDescriptionChanged();
    partial void OnWalkTitleChanging(string value);
    partial void OnWalkTitleChanged();
    partial void OnWalkSummaryChanging(string value);
    partial void OnWalkSummaryChanged();
    partial void OnWalkStartPointChanging(string value);
    partial void OnWalkStartPointChanged();
    partial void OnWalkEndPointChanging(string value);
    partial void OnWalkEndPointChanged();
    partial void OnWalkTypeChanging(string value);
    partial void OnWalkTypeChanged();
    partial void OnWalkAreaNameChanging(string value);
    partial void OnWalkAreaNameChanged();
    partial void OnCartographicLengthChanging(System.Nullable<double> value);
    partial void OnCartographicLengthChanged();
    partial void OnMetresOfAscentChanging(System.Nullable<short> value);
    partial void OnMetresOfAscentChanged();
    partial void OnWalkCompanionsChanging(string value);
    partial void OnWalkCompanionsChanged();
    partial void OnWalkTotalTimeChanging(System.Nullable<int> value);
    partial void OnWalkTotalTimeChanged();
    partial void OnWalkAverageSpeedKmhChanging(System.Nullable<double> value);
    partial void OnWalkAverageSpeedKmhChanged();
    partial void OnMovingAverageKmhChanging(System.Nullable<double> value);
    partial void OnMovingAverageKmhChanged();
    partial void OnWalkConditionsChanging(string value);
    partial void OnWalkConditionsChanged();
    #endregion
		
		public Walk()
		{
			this._HillAscents = new EntitySet<HillAscent>(new Action<HillAscent>(this.attach_HillAscents), new Action<HillAscent>(this.detach_HillAscents));
			this._Markers = new EntitySet<Marker>(new Action<Marker>(this.attach_Markers), new Action<Marker>(this.detach_Markers));
			this._Marker_Observations = new EntitySet<Marker_Observation>(new Action<Marker_Observation>(this.attach_Marker_Observations), new Action<Marker_Observation>(this.detach_Marker_Observations));
			this._Walk_AssociatedFiles = new EntitySet<Walk_AssociatedFile>(new Action<Walk_AssociatedFile>(this.attach_Walk_AssociatedFiles), new Action<Walk_AssociatedFile>(this.detach_Walk_AssociatedFiles));
			this._Area = default(EntityRef<Area>);
			this._WalkType1 = default(EntityRef<WalkType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WalkID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int WalkID
		{
			get
			{
				return this._WalkID;
			}
			set
			{
				if ((this._WalkID != value))
				{
					this.OnWalkIDChanging(value);
					this.SendPropertyChanging();
					this._WalkID = value;
					this.SendPropertyChanged("WalkID");
					this.OnWalkIDChanged();
				}
			}
		}
		
        [DisplayName("Walk Date")]
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WalkDate", DbType="DateTime NOT NULL")]
		public System.DateTime WalkDate
		{
			get
			{
				return this._WalkDate;
			}
			set
			{
				if ((this._WalkDate != value))
				{
					this.OnWalkDateChanging(value);
					this.SendPropertyChanging();
					this._WalkDate = value;
					this.SendPropertyChanged("WalkDate");
					this.OnWalkDateChanged();
				}
			}
		}

        [DisplayName("Walk Description")]
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WalkDescription", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string WalkDescription
		{
			get
			{
				return this._WalkDescription;
			}
			set
			{
				if ((this._WalkDescription != value))
				{
					this.OnWalkDescriptionChanging(value);
					this.SendPropertyChanging();
					this._WalkDescription = value;
					this.SendPropertyChanged("WalkDescription");
					this.OnWalkDescriptionChanged();
				}
			}
		}

        [DisplayName("Walk Title")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WalkTitle", DbType="NVarChar(100)")]
		public string WalkTitle
		{
			get
			{
				return this._WalkTitle;
			}
			set
			{
				if ((this._WalkTitle != value))
				{
					this.OnWalkTitleChanging(value);
					this.SendPropertyChanging();
					this._WalkTitle = value;
					this.SendPropertyChanged("WalkTitle");
					this.OnWalkTitleChanged();
				}
			}
		}


        [DisplayName("Walk Summary")]
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WalkSummary", DbType="NVarChar(1000)")]
		public string WalkSummary
		{
			get
			{
				return this._WalkSummary;
			}
			set
			{
				if ((this._WalkSummary != value))
				{
					this.OnWalkSummaryChanging(value);
					this.SendPropertyChanging();
					this._WalkSummary = value;
					this.SendPropertyChanged("WalkSummary");
					this.OnWalkSummaryChanged();
				}
			}
		}

        [DisplayName("Walk Start Location")]
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WalkStartPoint", DbType="NVarChar(100)")]
		public string WalkStartPoint
		{
			get
			{
				return this._WalkStartPoint;
			}
			set
			{
				if ((this._WalkStartPoint != value))
				{
					this.OnWalkStartPointChanging(value);
					this.SendPropertyChanging();
					this._WalkStartPoint = value;
					this.SendPropertyChanged("WalkStartPoint");
					this.OnWalkStartPointChanged();
				}
			}
		}

        [DisplayName("Walk End Location")]
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WalkEndPoint", DbType="NVarChar(100)")]
		public string WalkEndPoint
		{
			get
			{
				return this._WalkEndPoint;
			}
			set
			{
				if ((this._WalkEndPoint != value))
				{
					this.OnWalkEndPointChanging(value);
					this.SendPropertyChanging();
					this._WalkEndPoint = value;
					this.SendPropertyChanged("WalkEndPoint");
					this.OnWalkEndPointChanged();
				}
			}
		}

        [DisplayName("Walk Type")]
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WalkType", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string WalkType
		{
			get
			{
				return this._WalkType;
			}
			set
			{
				if ((this._WalkType != value))
				{
					if (this._WalkType1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWalkTypeChanging(value);
					this.SendPropertyChanging();
					this._WalkType = value;
					this.SendPropertyChanged("WalkType");
					this.OnWalkTypeChanged();
				}
			}
		}

        [DisplayName("Walk Area")]
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WalkAreaName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string WalkAreaName
		{
			get
			{
				return this._WalkAreaName;
			}
			set
			{
				if ((this._WalkAreaName != value))
				{
					if (this._Area.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWalkAreaNameChanging(value);
					this.SendPropertyChanging();
					this._WalkAreaName = value;
					this.SendPropertyChanged("WalkAreaName");
					this.OnWalkAreaNameChanged();
				}
			}
		}

        [DisplayName("Cartographic Length (Km)")]
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CartographicLength", DbType="Float")]
		public System.Nullable<double> CartographicLength
		{
			get
			{
				return this._CartographicLength;
			}
			set
			{
				if ((this._CartographicLength != value))
				{
					this.OnCartographicLengthChanging(value);
					this.SendPropertyChanging();
					this._CartographicLength = value;
					this.SendPropertyChanged("CartographicLength");
					this.OnCartographicLengthChanged();
				}
			}
		}

        [DisplayName("Metres of Ascent")]
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MetresOfAscent", DbType="SmallInt")]
		public System.Nullable<short> MetresOfAscent
		{
			get
			{
				return this._MetresOfAscent;
			}
			set
			{
				if ((this._MetresOfAscent != value))
				{
					this.OnMetresOfAscentChanging(value);
					this.SendPropertyChanging();
					this._MetresOfAscent = value;
					this.SendPropertyChanged("MetresOfAscent");
					this.OnMetresOfAscentChanged();
				}
			}
		}

        [DisplayName("Walk done with")]
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WalkCompanions", DbType="NVarChar(50)")]
		public string WalkCompanions
		{
			get
			{
				return this._WalkCompanions;
			}
			set
			{
				if ((this._WalkCompanions != value))
				{
					this.OnWalkCompanionsChanging(value);
					this.SendPropertyChanging();
					this._WalkCompanions = value;
					this.SendPropertyChanged("WalkCompanions");
					this.OnWalkCompanionsChanged();
				}
			}
		}

        [DisplayName("Total Time")]
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WalkTotalTime", DbType="Int")]
		public System.Nullable<int> WalkTotalTime
		{
			get
			{
				return this._WalkTotalTime;
			}
			set
			{
				if ((this._WalkTotalTime != value))
				{
					this.OnWalkTotalTimeChanging(value);
					this.SendPropertyChanging();
					this._WalkTotalTime = value;
					this.SendPropertyChanged("WalkTotalTime");
					this.OnWalkTotalTimeChanged();
				}
			}
		}

        [DisplayName("Average Speed (Kmh)")]
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WalkAverageSpeedKmh", DbType="Float")]
		public System.Nullable<double> WalkAverageSpeedKmh
		{
			get
			{
				return this._WalkAverageSpeedKmh;
			}
			set
			{
				if ((this._WalkAverageSpeedKmh != value))
				{
					this.OnWalkAverageSpeedKmhChanging(value);
					this.SendPropertyChanging();
					this._WalkAverageSpeedKmh = value;
					this.SendPropertyChanged("WalkAverageSpeedKmh");
					this.OnWalkAverageSpeedKmhChanged();
				}
			}
		}

        [DisplayName("Moving Average (Kmh)")]
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MovingAverageKmh", DbType="Float")]
		public System.Nullable<double> MovingAverageKmh
		{
			get
			{
				return this._MovingAverageKmh;
			}
			set
			{
				if ((this._MovingAverageKmh != value))
				{
					this.OnMovingAverageKmhChanging(value);
					this.SendPropertyChanging();
					this._MovingAverageKmh = value;
					this.SendPropertyChanged("MovingAverageKmh");
					this.OnMovingAverageKmhChanged();
				}
			}
		}

        [DisplayName("Conditions During Walk")]
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WalkConditions", DbType="NVarChar(200)")]
		public string WalkConditions
		{
			get
			{
				return this._WalkConditions;
			}
			set
			{
				if ((this._WalkConditions != value))
				{
					this.OnWalkConditionsChanging(value);
					this.SendPropertyChanging();
					this._WalkConditions = value;
					this.SendPropertyChanged("WalkConditions");
					this.OnWalkConditionsChanged();
				}
			}
		}

        [DisplayName("Hills Ascended During Walk")]
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Walk_HillAscent", Storage="_HillAscents", ThisKey="WalkID", OtherKey="WalkID")]
		public EntitySet<HillAscent> HillAscents
		{
			get
			{
				return this._HillAscents;
			}
			set
			{
				this._HillAscents.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Walk_Marker", Storage="_Markers", ThisKey="WalkID", OtherKey="WalkID")]
		public EntitySet<Marker> Markers
		{
			get
			{
				return this._Markers;
			}
			set
			{
				this._Markers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Walk_Marker_Observation", Storage="_Marker_Observations", ThisKey="WalkID", OtherKey="WalkID")]
		public EntitySet<Marker_Observation> Marker_Observations
		{
			get
			{
				return this._Marker_Observations;
			}
			set
			{
				this._Marker_Observations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Walk_Walk_AssociatedFile", Storage="_Walk_AssociatedFiles", ThisKey="WalkID", OtherKey="WalkID")]
		public EntitySet<Walk_AssociatedFile> Walk_AssociatedFiles
		{
			get
			{
				return this._Walk_AssociatedFiles;
			}
			set
			{
				this._Walk_AssociatedFiles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Area_Walk", Storage="_Area", ThisKey="WalkAreaName", OtherKey="Areaname", IsForeignKey=true)]
		public Area Area
		{
			get
			{
				return this._Area.Entity;
			}
			set
			{
				Area previousValue = this._Area.Entity;
				if (((previousValue != value) 
							|| (this._Area.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Area.Entity = null;
						previousValue.Walks.Remove(this);
					}
					this._Area.Entity = value;
					if ((value != null))
					{
						value.Walks.Add(this);
						this._WalkAreaName = value.Areaname;
					}
					else
					{
						this._WalkAreaName = default(string);
					}
					this.SendPropertyChanged("Area");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WalkType_Walk", Storage="_WalkType1", ThisKey="WalkType", OtherKey="WalkTypeString", IsForeignKey=true)]
		public WalkType WalkType1
		{
			get
			{
				return this._WalkType1.Entity;
			}
			set
			{
				WalkType previousValue = this._WalkType1.Entity;
				if (((previousValue != value) 
							|| (this._WalkType1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WalkType1.Entity = null;
						previousValue.Walks.Remove(this);
					}
					this._WalkType1.Entity = value;
					if ((value != null))
					{
						value.Walks.Add(this);
						this._WalkType = value.WalkTypeString;
					}
					else
					{
						this._WalkType = default(string);
					}
					this.SendPropertyChanged("WalkType1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_HillAscents(HillAscent entity)
		{
			this.SendPropertyChanging();
			entity.Walk = this;
		}
		
		private void detach_HillAscents(HillAscent entity)
		{
			this.SendPropertyChanging();
			entity.Walk = null;
		}
		
		private void attach_Markers(Marker entity)
		{
			this.SendPropertyChanging();
			entity.Walk = this;
		}
		
		private void detach_Markers(Marker entity)
		{
			this.SendPropertyChanging();
			entity.Walk = null;
		}
		
		private void attach_Marker_Observations(Marker_Observation entity)
		{
			this.SendPropertyChanging();
			entity.Walk = this;
		}
		
		private void detach_Marker_Observations(Marker_Observation entity)
		{
			this.SendPropertyChanging();
			entity.Walk = null;
		}
		
		private void attach_Walk_AssociatedFiles(Walk_AssociatedFile entity)
		{
			this.SendPropertyChanging();
			entity.Walk = this;
		}
		
		private void detach_Walk_AssociatedFiles(Walk_AssociatedFile entity)
		{
			this.SendPropertyChanging();
			entity.Walk = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="")]
	public partial class MyProgress
	{
		
		private int _NumberClimbed;
		
		private int _TotalHills;
		
		private string _ClassRef;
		
		private string _ClassName;
		
		public MyProgress()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberClimbed")]
		public int NumberClimbed
		{
			get
			{
				return this._NumberClimbed;
			}
			set
			{
				if ((this._NumberClimbed != value))
				{
					this._NumberClimbed = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalHills")]
		public int TotalHills
		{
			get
			{
				return this._TotalHills;
			}
			set
			{
				if ((this._TotalHills != value))
				{
					this._TotalHills = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassRef", CanBeNull=false)]
		public string ClassRef
		{
			get
			{
				return this._ClassRef;
			}
			set
			{
				if ((this._ClassRef != value))
				{
					this._ClassRef = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassName", CanBeNull=false)]
		public string ClassName
		{
			get
			{
				return this._ClassName;
			}
			set
			{
				if ((this._ClassName != value))
				{
					this._ClassName = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
