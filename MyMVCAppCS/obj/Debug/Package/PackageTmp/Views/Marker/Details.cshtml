@using MyMVCApp.Model
@using Newtonsoft.Json
@model MyMVCApp.DAL.Marker

@{ViewBag.Title = "Marker: " + Model.MarkerTitle; }

@section ViewSpecificHead
{
    <script type="text/javascript" src="~/Scripts/jquery-2.1.1.js"></script>
}


<div class="spacerdiv"></div>
<table class="datatable">
    <tr>
        <td><h2>Marker Name:</h2></td>
        <td><h2>@Model.MarkerTitle</h2></td>
    </tr>
    <tr>
        <td>Current Status</td>
        <td>@Model.Status</td>
    </tr>
    <tr>
        <td>Left on Hill</td>
        <td>
            @if (Model.Hill != null)
            {@Model.Hill.Hillname}
        </td>
    </tr>
    <tr>
        <td>Left on walk</td>
        <td>
            @if (Model.WalkID != null)
            {
                @Html.ActionLink(Model.Walk.WalkTitle, "Details", "Walks", new { id = Model.WalkID }, null) }
            else
            {
                @: No walk associated with marker
            }
        </td>
    </tr>
    <tr>
        <td>OS Grid Reference</td>
        <td>@Model.GPS_Reference</td>
    </tr>
    <tr>
        <td>Date Left</td>
        <td>@String.Format("{0:D}", Model.DateLeft)</td>
    </tr>

    <tr>
        <td>Description</td>
        <td>@Html.Raw(Model.Location_Description.Replace(Environment.NewLine, "<br />"))</td>
    </tr>
</table>

<div class="spacerdiv"></div>
<div id="hillmap"></div>
<div class="spacerdiv"></div>
<div><input type="button" id="getallmarkers" value="Show all markers in map bounds" onclick="getAllMarkersInBounds();" /></div>
<div class="spacerdiv"></div>
<table class="datatable">
    <tr>
        <td colspan="4"><h2>Observations</h2></td>
    </tr>
    <tr>
        <th>Date</th>
        <th>Found?</th>
        <th>Walk</th>
        <th>Description</th>
    </tr>
    @foreach (MyMVCApp.DAL.Marker_Observation oMarkerObs in Model.Marker_Observations)
    {
        <tr>
            <td>@String.Format("{0:D}", oMarkerObs.DateOfObservation)</td>
            <td>
                @if (oMarkerObs.FoundFlag)
                {
                    @: Found
                }
                else
                {
                    @: Not yet re-found
                }
            </td>
            <td>@Html.ActionLink(oMarkerObs.Walk.WalkTitle, "Details", "Walks", new { id = oMarkerObs.WalkID }, null)</td>
            <td>@oMarkerObs.ObservationText</td>
        </tr>
}
</table>
<div class="spacerdiv"></div>

@if (Model.Walk_AssociatedFiles.Count == 0)
{
    @: <p>There are no images of the marker</p>
}
else
{
    foreach (MyMVCApp.DAL.Walk_AssociatedFile oAssocFile in Model.Walk_AssociatedFiles)
    {

        <div class="walkdetails">
            <div><img src="~/@oAssocFile.Walk_AssociatedFile_Name" alt="@oAssocFile.Walk_AssociatedFile_Caption" class="walkimage" /></div>
            <div class="imagecaption"><em>@oAssocFile.Walk_AssociatedFile_Caption</em><br />&nbsp;</div>
        </div>}
}
<p>
    @Html.ActionLink("Edit", "Edit", new { id = Model.MarkerID }) |
    @Html.ActionLink("Back to List", "Index")
</p>


<script>
    //---------------------------------------------------------------------------------------------------
    // The following script loads a leaflet map where data is available
    //----------------------------------------------------------------

    var mineasting = 9999999;
    var maxeasting = -9999999;
    var minnorthing = 9999999;
    var maxnorthing = -9999999;

    //If there are any markers with GPS locations in the current page add them as markers to the map--------
    var markerdata =  @(Html.Raw(JsonConvert.SerializeObject(ViewData["MarkerMarkers"])));

    var markercoords = new Array(markerdata.length);
    var markerpopups = new Array(markerdata.length);

    for (let i = 0; i < markerdata.length; i++)
    {
        const epsg27000 = os.Transform.fromGridRef(markerdata[i].OSMap10);

        if (epsg27000.ea > maxeasting) {
            maxeasting = epsg27000.ea;
        }

        if (epsg27000.ea < mineasting) {
            mineasting = epsg27000.ea;
        }

        if (epsg27000.no > maxnorthing) {
            maxnorthing = epsg27000.no;
        }

        if (epsg27000.no < minnorthing) {
            minnorthing = epsg27000.no;
        }

        markercoords[i] = [epsg27000.ea, epsg27000.no];
        markerpopups[i] = markerdata[i].popupText;
    }

    // Initialize the lealfet map.
    const map = L.map('hillmap', mapOptions);

    addMarkersToMap();

    // Finally load and display ZXY tile layer on the map.
    const basemap = L.tileLayer('https://api.os.uk/maps/raster/v1/zxy/Leisure_27700/{z}/{x}/{y}.png?key=' + OSapiKey).addTo(map);

</script>

