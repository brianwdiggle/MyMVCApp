@using MyMVCApp.DAL
@using Newtonsoft.Json
@model MyMVCAppCS.Models.PaginatedListMVC<Hill>

    @{ ViewBag.Title = "Hills in Classification " + ViewData["HillClassName"];}

    <h2>@ViewData["HillClassName"]s <em>(@ViewData["NumberClimbed"] of @Model.TotalCount climbed)</em></h2>

    <table class="hiddentable">
        <tr>
            <td>
                @Html.Raw(Model.PageNavigationLinks)
            </td>
            <td>Page Size: <input type="text" name="pagesize" size="3" value="@ViewData["pagesize"]" /> <input type="button" value="Change" /></td>
            <td align="right">Showing @Model.RecordsShowing Hills</td>
        </tr>
    </table>

    <div class="spacerdiv"></div>
    <div id="hillmap"></div>
    <div class="spacerdiv"></div>


    <table class="walksbydate">
        <tr class="heightcell">
            <th>No.</th>
            <th>
                @if (ViewData["OrderBy"].Equals("Name"))
                {
    <strong>
        @if (ViewData["OrderAscDesc"].Equals("Asc"))
        {
@Html.ActionLink("Name <Asc>", "HillsInClassification", new { OrderBy = "NameDesc" }) }
else
{
@Html.ActionLink("Name <Desc>", "HillsInClassification", new { OrderBy = "NameAsc" })}
    </strong> }
else
{
@Html.ActionLink("Name", "HillsInClassification", new { OrderBy = "NameDesc" })}
            </th>
            <th>Classes</th>
            <th>
                @if (ViewData["OrderBy"].Equals("Metres"))
                {
    <strong>
        @if (ViewData["OrderAscDesc"].Equals("Asc"))
        {
@Html.ActionLink("Metres <Asc>", "HillsInClassification", new { OrderBy = "MetresDesc" }) }
else
{
@Html.ActionLink("Metres <Desc>", "HillsInClassification", new { OrderBy = "MetresAsc" })}
    </strong> }
else
{
@Html.ActionLink("Metres", "HillsInClassification", new { OrderBy = "MetresDesc" })}
            </th>
            <th>Feet</th>
            <th>Gridref</th>
            <th>Drop</th>
            <th>
                @if (ViewData["OrderBy"].Equals("FirstAscent"))
                {
    <strong>
        @if (ViewData["OrderAscDesc"].Equals("Asc"))
        {
@Html.ActionLink("Date Climbed <Asc>", "HillsInClassification", new { OrderBy = "FirstAscentDesc" }) }
else
{
@Html.ActionLink("Date Climbed <Desc>", "HillsInClassification", new { OrderBy = "FirstAscentAsc" })}
    </strong> }
else
{
@Html.ActionLink("Date Climbed", "HillsInClassification", new { OrderBy = "FirstAscentDesc" })}
            </th>
            <th>
                @if (ViewData["OrderBy"].Equals("NumberAscent"))
                {
    <strong>
        @if (ViewData["OrderAscDesc"].Equals("Asc"))
        {
@Html.ActionLink("Ascents <Asc>", "HillsInClassification", new { OrderBy = "NumberAscentDesc" }) }
else
{
@Html.ActionLink("Ascents <Desc>", "HillsInClassification", new { OrderBy = "NumberAscentAsc" })}
    </strong> }
else
{
@Html.ActionLink("Ascents", "HillsInClassification", new { OrderBy = "NumberAscentDesc" })}
            </th>
        </tr>

        @{ int iHillNumberInClassification = ((Model.PageIndex - 1) * Model.PageSize) + 1;

            foreach (Hill item in Model)
            {

<tr style="background-color:@Html.Raw(WalkingStick.NumberOfAscentsAsColour(item.NumberOfAscents))">
    <td class="hilllistnumber">@iHillNumberInClassification</td>
    <td class="hillname">@Html.ActionLink(item.Hillname, "HillDetails", new { id = item.Hillnumber }) </td>
    <td class="hillclasses">@Html.Raw(WalkingStick.HillClassesToLinks(item.Classification, VirtualPathUtility.ToAbsolute("~/")))</td>
    <td>@Html.Encode(String.Format("{0:#}", item.Metres))</td>
    <td>@String.Format("{0:#}", item.Feet)</td>
    <td class="gridref">
        @if (!string.IsNullOrEmpty(item.Gridref10))
        {
@item.Gridref10 }
else
{
@item.Gridref}
    </td>
    <td>@String.Format("{0:#}", item.Drop)</td>
    <td class="firstclimbeddate">@String.Format("{0:D}", item.FirstClimbedDate)</td>
    <td>@String.Format("{0:#}", item.NumberOfAscents)</td>
</tr> iHillNumberInClassification = iHillNumberInClassification + 1;

            } }

    </table>
    <table class="hiddentable">
        <tr>
            <td colspan="3">&nbsp;</td>
        </tr>
        <tr>
            <td>
                @Html.Raw(Model.PageNavigationLinks)
            </td>
            <td>Page Size: <input type="text" name="pagesize" size="3" /></td>
            <td align="right">Showing @Model.RecordsShowing Hills</td>
        </tr>
    </table>

    <script>

    //---------------------------------------------------------------------------------------------------
    // The following script loads a leaflet map where data is available
    //----------------------------------------------------------------

    // Function toInternationalDate ---------------------------------------------------------------------
    // Convert date/time string in format DD/MM/YYYY HH:MM:SS to standard javascript format YYYY/MM/DD
    const toInternationaDate = function (ukDate) {
        var startTimeLoc = ukDate.indexOf(' ');

        //Override end location if ukDate does not contain a time portion
        if (startTimeLoc == -1) {
            startTimeLoc = ukDate.length;
        }

        ukDateSplit = ukDate.substring(0, startTimeLoc).split('/');

        standardDay = ukDateSplit[0];
        standardMonth = ukDateSplit[1];
        standardYear = ukDateSplit[2];

        return new Date(standardYear, standardMonth, standardDay);
    }

    var mineasting = 9999999;
    var maxeasting = -9999999;
    var minnorthing = 9999999;
    var maxnorthing = -9999999;

    //If there are any hills with GPS locations in the current page add them as markers to the map--------
    var markerdata =  @(Html.Raw(JsonConvert.SerializeObject(ViewData["HillMarkers"])));

    var markercoords = new Array(markerdata.length);
    var markerpopups = new Array(markerdata.length);

    for (let i = 0; i < markerdata.length; i++)
    {
        const epsg27000 = os.Transform.fromGridRef(markerdata[i].OSMap10);

        if (epsg27000.ea > maxeasting) {
            maxeasting = epsg27000.ea;
        }

        if (epsg27000.ea < mineasting) {
            mineasting = epsg27000.ea;
        }

        if (epsg27000.no > maxnorthing) {
            maxnorthing = epsg27000.no;
        }

        if (epsg27000.no < minnorthing) {
            minnorthing = epsg27000.no;
        }

        markercoords[i] = [epsg27000.ea, epsg27000.no];
        markerpopups[i] = markerdata[i].popupText;
    }
    //----If GPS data is available associated with the the current page of markers, then display the map----
    const OSapiKey = '468YAE3SzsjV8Uu8XPPDQpVVh2mA67vC';

    // using  // https://github.com/OrdnanceSurvey/os-transform
    //----Define the map centre point by converting an os grid reference into ESPG:27000 coordinates

    const map_center = [54.5, -3.09];

    // Setup the EPSG:27700 (British National Grid) projection.
    const crs = new L.Proj.CRS('EPSG:27700', '+proj=tmerc +lat_0=49 +lon_0=-2 +k=0.9996012717 +x_0=400000 +y_0=-100000 +ellps=airy +towgs84=446.448,-125.157,542.06,0.15,0.247,0.842,-20.489 +units=m +no_defs', {
    resolutions: [896.0, 448.0, 224.0, 112.0, 56.0, 28.0, 14.0, 7.0, 3.5, 1.75],
    origin: [-238375.0, 1376256.0]
    });

    // Leaflet works natively in WGS84 -a.k.a. EPSG:4326. The following function converts from OS National grid easting and northing to this.
    const transformCoords = function (arr) {
    return proj4('EPSG:27700', 'EPSG:4326', arr).reverse();
    };

    // Define the options associated with the Leaflet map which will be created
    const mapOptions = {
    crs: crs,
    minZoom: 0,
    maxZoom: 9,
    center: map_center,
    zoom: 8,   // 8 this is the first 1:25000 zoom level
    maxBounds: [    // as defined by the EPSG:27000 coordinate system
    transformCoords([-238375.0, 0.0]),
    transformCoords([900000.0, 1376256.0])
    ],
    attributionControl: true
    };

    // Initialize the lealfet map.
    const map = L.map('hillmap', mapOptions);

    if (markerdata != null) {

        const climbedsummiticon = L.icon({
            iconUrl: "../../Content/images/TrigGreen.gif",
            iconSize: [13, 13],
            iconAnchor: [6, 13]
        });

        let climbedmarkeroptions = {
            zIndexOffset: 1000,
            icon: climbedsummiticon
        };

        const unclimbedsummiticon = L.icon({
            iconUrl: "../../Content/images/TrigRed.gif",
            iconSize: [13, 13],
            iconAnchor: [6, 13]
        });

        let unclimbedmarkeroptions = {
            zIndexOffset: 1000,
            icon: unclimbedsummiticon
        };


        //---Add the markers to the map

        for (let i = 0; i < markerdata.length; i++) {
            var thislat = markercoords[i][0];
            var thislong = markercoords[i][1];
            const popText = markerpopups[i];
            const popupOptions = {
                className: "markerPopup"
            }

            if (markerdata[i].numberOfAscents > 0) {
                marker = new L.marker(transformCoords([thislat, thislong]), climbedmarkeroptions)
                    .bindPopup(popText, popupOptions)
                    .openPopup()
                    .addTo(map);
            } else {
                marker = new L.marker(transformCoords([thislat, thislong]), unclimbedmarkeroptions)
                    .bindPopup(popText, popupOptions)
                    .openPopup()
                    .addTo(map);
            }
   
        }

        //----Set the bounds of the map so that all the markers are displayed
        map.fitBounds(
            [
                transformCoords([mineasting, minnorthing]),
                transformCoords([maxeasting, maxnorthing])
            ]
        );

    }

    console.log("Now loading the tile layer using OS API...");

    // Finally load and display ZXY tile layer on the map.
    const basemap = L.tileLayer('https://api.os.uk/maps/raster/v1/zxy/Leisure_27700/{z}/{x}/{y}.png?key=' + OSapiKey).addTo(map);


    </script>

