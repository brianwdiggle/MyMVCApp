@using System.Threading
@using MyMVCApp.DAL
@using MyMVCApp.Model

@{
    ViewBag.Title = Model.Hillname + " " + String.Format("{0}", Model.Feet) + "ft";
}
<div class="spacerdiv"></div>
<div class="walksbydate">
    <table class="datatable">
        <tr>
            <td colspan="2" class="heading2">@Model.Hillname</td>

            <td class="heading2"></td>
            <td class="column4 heading3">@Html.Encode(String.Format("{0}", Model.Feet)) ft, @Html.Encode(String.Format("{0}", Model.Metres)) m</td>
        </tr>
        <tr>
            <td class="column1">First ascent:</td>
            <td class="column2">@Model.FirstClimbedDate</td>
            <td class="column3">Number of ascents: </td>
            <td class="column4">@Model.NumberOfAscents</td>
        </tr>
        <tr>
            <td class="column1">Grid reference:</td>
            <td class="column2">@Model.Gridref10</td>
            <td class="column3">Section:</td>
            <td class="column4">@Model._Section</td>
        </tr>
        <tr>
            <td class="column1">Feature:</td>
            <td class="column2">@Model.Feature</td>
            <td class="column3">Drop:</td>
            <td class="column4">@Model.Drop</td>
        </tr>
        <tr>
            <td class="column1">Classes:</td>
            <td class="column2">@Model.Classification</td>
            <td class="column3">EPSG:27000 coords:</td>
            <td class="column4">@Model.Xcoord , @Model.Ycoord</td>
        </tr>
    </table>
</div>
<div class="spacerdiv"></div>
<div id="hillmap"></div>
<div class="spacerdiv"></div>
<div class="walksbydate">
    <table class="datatable">
        @{
            int iAscentCounter = 1;

            var oAscents = (List<HillAscent>)ViewData["HillAscents"];

            <tr>
                <td colspan="4" class="heading2">Ascents</td>
            </tr>

            foreach (HillAscent oAscent in oAscents)
            {

                <tr>
                    <td>@iAscentCounter.ToString(Thread.CurrentThread.CurrentCulture)</td>
                    <td>@Html.Encode(String.Format("{0:D}", oAscent.AscentDate))</td>
                    <td><a href="~/Walks/Details/@oAscent.Walk.WalkID">@oAscent.Walk.WalkTitle</a></td>
                    <td><a href="~/Walks/Details/@oAscent.Walk.WalkID">@oAscent.Walk.WalkSummary</a></td>
                </tr>
                iAscentCounter = iAscentCounter + 1;
            }

            if (iAscentCounter == 1)
            {
                <tr>
                    <td colspan="4">No Ascents</td>
                </tr>
            }
        }

    </table>
</div>

<script>

    // Function toInternationalDate ---------------------------------------------------------------------
     // Convert date/time string in format DD/MM/YYYY HH:MM:SS to standard javascript format YYYY/MM/DD
    const toInternationaDate = function (ukDate) {
            var startTimeLoc = ukDate.indexOf(' ');
            //Override end location if ukDate does not contain a time portion
            if (startTimeLoc == -1) {
        startTimeLoc = ukDate.length;
            }
            ukDateSplit = ukDate.substring(0,startTimeLoc).split('/');

            standardDay = ukDateSplit[0];
            standardMonth = ukDateSplit[1];
            standardYear = ukDateSplit[2];

            return new Date(standardYear, standardMonth, standardDay);
        }


        const OSapiKey = '468YAE3SzsjV8Uu8XPPDQpVVh2mA67vC';

        var firstClimbedDate = toInternationaDate("@Model.FirstClimbedDate");  // convert from british date format to standard js format
        var dateOptions = {weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };

        // using  // https://github.com/OrdnanceSurvey/os-transform
        //const epsg27000_center = os.Transform.fromGridRef("NY 21541 07216");  // Returns {ea: 337297, no: 503695 } - center on scafell pike

        //----Define the map centre point by converting an os grid reference into ESPG:27000 coordinates
        const map_center = [@Model.Xcoord, @Model.Ycoord];

        // Setup the EPSG:27700 (British National Grid) projection.
        const crs = new L.Proj.CRS('EPSG:27700', '+proj=tmerc +lat_0=49 +lon_0=-2 +k=0.9996012717 +x_0=400000 +y_0=-100000 +ellps=airy +towgs84=446.448,-125.157,542.06,0.15,0.247,0.842,-20.489 +units=m +no_defs', {
        resolutions: [896.0, 448.0, 224.0, 112.0, 56.0, 28.0, 14.0, 7.0, 3.5, 1.75],
            origin: [-238375.0, 1376256.0]
        });

        // Leaflet works natively in WGS84 -a.k.a. EPSG:4326. The following function converts from OS National grid to this.
        const transformCoords = function (arr) {
            return proj4('EPSG:27700', 'EPSG:4326', arr).reverse();
        };


        // Define the options associated with the Leaflet map which will be created
        const mapOptions = {
        crs: crs,
            minZoom: 0,
            maxZoom: 9,
            center: transformCoords(map_center),
            zoom: 8,   // 8 this is the first 1:25000 zoom level
            maxBounds: [    // as defined by the EPSG:27000 coordinate system
                transformCoords([-238375.0, 0.0]),
                transformCoords([900000.0, 1376256.0])
            ],
            attributionControl: true
        };

        // Initialize the lealfet map.
        const map = L.map('hillmap', mapOptions);

        // Display red or green summit icon depending on whether the hill has been climbed
        const climbedsummiticon = L.icon({
            iconUrl: "/Content/images/TrigGreen.gif",
            iconSize: [13, 13],
            iconAnchor: [6, 13]
        });

        let climbedmapmarkeroptions = {
            zIndexOffset: 1000,
            icon: climbedsummiticon
        };

        const unclimbedsummiticon = L.icon({
            iconUrl: "/Content/images/TrigRed.gif",
            iconSize: [13, 13],
            iconAnchor: [6, 13]
        });

        let unclimbedapmarkeroptions = {
            zIndexOffset: 1000,
            icon: unclimbedsummiticon
        };

    console.log("firstClimbedDate=" + firstClimbedDate);
     //---Add hill as a marker on the map-----------
    if (firstClimbedDate != null && firstClimbedDate != "" && firstClimbedDate != "Invalid Date") {

        const hill_marker = L.marker(transformCoords([@Model.Xcoord, @Model.Ycoord]), climbedmapmarkeroptions)
            .bindPopup("<b>@Model.Hillname" + ", @Model.Metres" + "m</b><br>First climbed: " + firstClimbedDate.toLocaleDateString("en-GB", dateOptions))
            .openPopup()
            .addTo(map); //Add hill marker to map, converting coords to WGS84
    } else {

        const hill_marker = L.marker(transformCoords([@Model.Xcoord, @Model.Ycoord]), unclimbedapmarkeroptions)
            .bindPopup("<b>@Model.Hillname" + ", @Model.Metres" +"m</b><br>First climbed: " + firstClimbedDate.toLocaleDateString("en-GB",dateOptions))
            .openPopup()
            .addTo(map); //Add hill marker to map, converting coords to WGS84
    }



    // Finally load and display ZXY tile layer on the map.
    const basemap = L.tileLayer('https://api.os.uk/maps/raster/v1/zxy/Leisure_27700/{z}/{x}/{y}.png?key=' + OSapiKey).addTo(map);

</script>


