@using Newtonsoft.Json

@model MyMVCAppCS.Models.PaginatedListMVC<MyMVCApp.DAL.Marker>
    @{ ViewBag.Title = "Markers Paged List"; }
    <h2>Browse Markers</h2>

    <p>@Html.ActionLink("Create New Marker", "Create")</p>

    <div class="spacerdiv"></div>
    <div id="hillmap"></div>
    <div class="spacerdiv"></div>


    <table class="hiddentable">
        <tr>
            <td>@Html.Raw(Model.PageNavigationLinks)</td>
            <td class="alignright">@Model.RecordsShowing Markers</td>
        </tr>
    </table>

    <table class="walksbydate">
        <tr>
            <th>No.</th>

            <th>Action</th>

            <th>
                @if (ViewData["OrderBy"].Equals("Title"))
                {
                    <strong>
                        @if (ViewData["OrderAscDesc"].Equals("Asc"))
                        {
                            @Html.ActionLink("Title <Asc>", "Index", new { OrderBy = "TitleDesc" }) }
                        else
                        {
                            @Html.ActionLink("Title <Desc>", "Index", new { OrderBy = "TitleAsc" })}
                    </strong> }
                else
                {
                    @Html.ActionLink("Title", "Index", new { OrderBy = "TitleAsc" })}
            </th>
            <th>
                @if (ViewData["OrderBy"].Equals("Walk"))
                {
                    <strong>
                        @if (ViewData["OrderAscDesc"].Equals("Asc"))
                        {
                            @Html.ActionLink("Walk <Asc>", "Index", new { OrderBy = "WalkDesc" }) }
                        else
                        {
                            @Html.ActionLink("Walk <Desc>", "Index", new { OrderBy = "WalkAsc" })}
                    </strong> }
                else
                {
                    @Html.ActionLink("Walk", "Index", new { OrderBy = "WalkAsc" })}
            </th>
            <th>
                @if (ViewData["OrderBy"].Equals("WalkArea"))
                {
                    <strong>
                        @if (ViewData["OrderAscDesc"].Equals("Asc"))
                        {
                            @Html.ActionLink("Walk Area <Asc>", "Index", new { OrderBy = "WalkAreaDesc" }) }
                        else
                        {
                            @Html.ActionLink("Walk Area <Desc>", "Index", new { OrderBy = "WalkAreaAsc" })}
                    </strong> }
                else
                {
                    @Html.ActionLink("Walk Area", "Index", new { OrderBy = "WalkAreaAsc" })}
            </th>
            <th>
                @if (ViewData["OrderBy"].Equals("Date"))
                {
                    <strong>
                        @if (ViewData["OrderAscDesc"].Equals("Asc"))
                        {
                            @Html.ActionLink("Date <Asc>", "Index", new { OrderBy = "DateDesc" }) }
                        else
                        {
                            @Html.ActionLink("Date <Desc>", "Index", new { OrderBy = "DateAsc" })}
                    </strong> }
                else
                {
                    @Html.ActionLink("Date", "Index", new { OrderBy = "DateAsc" });
                }
            </th>
            <th>
                @if (ViewData["OrderBy"].Equals("Status"))
                {
                    <strong>
                        @if (ViewData["OrderAscDesc"].Equals("Asc"))
                        {
                            @Html.ActionLink("Status <Asc>", "Index", new { OrderBy = "StatusDesc" }) }
                        else
                        {
                            @Html.ActionLink("Status <Desc>", "Index", new { OrderBy = "StatusAsc" })}
                    </strong> }
                else
                {
                    @Html.ActionLink("Status", "Index", new { OrderBy = "StatusAsc" })}
            </th>
        </tr>

        @{ int itemNumber = ((Model.PageIndex - 1) * Model.PageSize);
            foreach (var item in Model)
            {
                itemNumber = itemNumber + 1;
                <tr>
                    <td>@itemNumber.ToString()</td>
                    <td>@Html.ActionLink("Edit", "Edit", new { id = item.MarkerID })</td>
                    <td>@Html.ActionLink(item.MarkerTitle, "Details", new { id = item.MarkerID })</td>
                    <td>
                        @if (item.Walk != null)
                        {
                            if (item.Walk.WalkTitle.Length > 40)
                            {
                                @Html.ActionLink(item.Walk.WalkTitle.Substring(0, 40) + "..", "Details", "Walks", new { id = item.Walk.WalkID }, null) }

                            else
                            {
                                @Html.ActionLink(item.Walk.WalkTitle, "Details", "Walks", new { id = item.Walk.WalkID }, null)}
                        }
                    </td>
                    <td>
                        @if (item.Walk != null)
                        {
                            @Html.ActionLink(item.Walk.Area.Areaname, "HillsByArea", "Walks", new { id = item.Walk.Area.Arearef.Trim() }, new { dummy = 1 });
                        }
                    </td>
                    <td>
                        @String.Format("{0:D}", item.DateLeft)
                    </td>
                    <td>
                        @item.Status
                    </td>
                </tr>
 } }
    </table>
    <table class="hiddentable">
        <tr>
            <td>@Html.Raw(Model.PageNavigationLinks)</td>
            <td class="alignright">@Model.RecordsShowing Markers</td>
        </tr>
    </table>


    <script>

    //---------------------------------------------------------------------------------------------------
    // The following script loads a leaflet map where data is available
    //----------------------------------------------------------------

    // Function toInternationalDate ---------------------------------------------------------------------
    // Convert date/time string in format DD/MM/YYYY HH:MM:SS to standard javascript format YYYY/MM/DD
    const toInternationaDate = function (ukDate) {
        var startTimeLoc = ukDate.indexOf(' ');

        //Override end location if ukDate does not contain a time portion
        if (startTimeLoc == -1) {
            startTimeLoc = ukDate.length;
        }

        ukDateSplit = ukDate.substring(0, startTimeLoc).split('/');

        standardDay = ukDateSplit[0];
        standardMonth = ukDateSplit[1];
        standardYear = ukDateSplit[2];

        return new Date(standardYear, standardMonth, standardDay);
    }

    var mineasting = 9999999;
    var maxeasting = -9999999;
    var minnorthing = 9999999;
    var maxnorthing = -9999999;

    //If there are any markers with GPS locations in the current page add them as markers to the map--------
    var markerdata =  @(Html.Raw(JsonConvert.SerializeObject(ViewData["MarkerMarkers"])));

    var markercoords = new Array(markerdata.length);
    var markerpopups = new Array(markerdata.length);

    for (let i = 0; i < markerdata.length; i++)
    {
        const epsg27000 = os.Transform.fromGridRef(markerdata[i].OSMap10);

        if (epsg27000.ea > maxeasting) {
            maxeasting = epsg27000.ea;
        }

        if (epsg27000.ea < mineasting) {
            mineasting = epsg27000.ea;
        }

        if (epsg27000.no > maxnorthing) {
            maxnorthing = epsg27000.no;
        }

        if (epsg27000.no < minnorthing) {
            minnorthing = epsg27000.no;
        }

        markercoords[i] = [epsg27000.ea, epsg27000.no];
        markerpopups[i] = markerdata[i].popupText;
    }
    //----If GPS data is available associated with the the current page of markers, then display the map----
    const OSapiKey = '468YAE3SzsjV8Uu8XPPDQpVVh2mA67vC';
 
    // using  // https://github.com/OrdnanceSurvey/os-transform
    //----Define the map centre point by converting an os grid reference into ESPG:27000 coordinates

    const map_center = [54.5, -3.09];

    // Setup the EPSG:27700 (British National Grid) projection.
    const crs = new L.Proj.CRS('EPSG:27700', '+proj=tmerc +lat_0=49 +lon_0=-2 +k=0.9996012717 +x_0=400000 +y_0=-100000 +ellps=airy +towgs84=446.448,-125.157,542.06,0.15,0.247,0.842,-20.489 +units=m +no_defs', {
    resolutions: [896.0, 448.0, 224.0, 112.0, 56.0, 28.0, 14.0, 7.0, 3.5, 1.75],
    origin: [-238375.0, 1376256.0]
    });

    // Leaflet works natively in WGS84 -a.k.a. EPSG:4326 i.e. lat/long. The following function converts from OS National grid easting and northing to this.
    const transformCoords = function (arr) {
    return proj4('EPSG:27700', 'EPSG:4326', arr).reverse();
    };

    // Define the options associated with the Leaflet map which will be created
    const mapOptions = {
    crs: crs,
    minZoom: 0,
    maxZoom: 9,
    center: map_center,
    zoom: 8,   // 8 this is the first 1:25000 zoom level
    maxBounds: [    // as defined by the EPSG:27000 coordinate system
    transformCoords([-238375.0, 0.0]),
    transformCoords([900000.0, 1376256.0])
    ],
    attributionControl: true
    };

    // Initialize the lealfet map.
    const map = L.map('hillmap', mapOptions);

    if (markerdata != null) {

        let markeroptions = {
            zIndexOffset: 1000
        };


        //---Add the markers to the map

        for (let i = 0; i < markerdata.length; i++) {
            var this27000easting = markercoords[i][0];
            var this27000northing = markercoords[i][1];
            const popText = markerpopups[i];
            const popupOptions = {
                className: "markerPopup"
            }
            marker = new L.marker(transformCoords([this27000easting, this2700northing]), markeroptions)
                .bindPopup(popText, popupOptions)
                .openPopup()
                .addTo(map);
        }

        //----Set the bounds of the map so that all the markers are displayed
        map.fitBounds(
            [
                transformCoords([mineasting, minnorthing]),
                transformCoords([maxeasting, maxnorthing])
            ]
        );
      
    }

    console.log("Now loading the tile layer using OS API...");

    // Finally load and display ZXY tile layer on the map.
    const basemap = L.tileLayer('https://api.os.uk/maps/raster/v1/zxy/Leisure_27700/{z}/{x}/{y}.png?key=' + OSapiKey).addTo(map);


    </script>
