@using Newtonsoft.Json

@model MyMVCAppCS.Models.PaginatedListMVC<MyMVCApp.DAL.Marker>
    @{ ViewBag.Title = "Markers Paged List"; }

    @section ViewSpecificHead
{
        <script type="text/javascript" src="~/Scripts/jquery-2.1.1.js"></script>
    }
    <h2>Browse Markers</h2>

    <p>@Html.ActionLink("Create New Marker", "Create")</p>

    <div class="spacerdiv"></div>
    <div id="hillmap"></div>
    <div class="spacerdiv"></div>


    <table class="hiddentable">
        <tr>
            <td>@Html.Raw(Model.PageNavigationLinks)</td>
            <td class="alignright">@Model.RecordsShowing Markers</td>
        </tr>
    </table>

    <table class="walksbydate">
        <tr>
            <th>No.</th>

            <th>Action</th>

            <th>
                @if (ViewData["OrderBy"].Equals("Title"))
                {
                    <strong>
                        @if (ViewData["OrderAscDesc"].Equals("Asc"))
                        {
                            @Html.ActionLink("Title <Asc>", "Index", new { OrderBy = "TitleDesc" }) }
                        else
                        {
                            @Html.ActionLink("Title <Desc>", "Index", new { OrderBy = "TitleAsc" })}
                    </strong> }
                else
                {
                    @Html.ActionLink("Title", "Index", new { OrderBy = "TitleAsc" })}
            </th>
            <th>
                @if (ViewData["OrderBy"].Equals("Walk"))
                {
                    <strong>
                        @if (ViewData["OrderAscDesc"].Equals("Asc"))
                        {
                            @Html.ActionLink("Walk <Asc>", "Index", new { OrderBy = "WalkDesc" }) }
                        else
                        {
                            @Html.ActionLink("Walk <Desc>", "Index", new { OrderBy = "WalkAsc" })}
                    </strong> }
                else
                {
                    @Html.ActionLink("Walk", "Index", new { OrderBy = "WalkAsc" })}
            </th>
            <th>
                @if (ViewData["OrderBy"].Equals("WalkArea"))
                {
                    <strong>
                        @if (ViewData["OrderAscDesc"].Equals("Asc"))
                        {
                            @Html.ActionLink("Walk Area <Asc>", "Index", new { OrderBy = "WalkAreaDesc" }) }
                        else
                        {
                            @Html.ActionLink("Walk Area <Desc>", "Index", new { OrderBy = "WalkAreaAsc" })}
                    </strong> }
                else
                {
                    @Html.ActionLink("Walk Area", "Index", new { OrderBy = "WalkAreaAsc" })}
            </th>
            <th>
                @if (ViewData["OrderBy"].Equals("Date"))
                {
                    <strong>
                        @if (ViewData["OrderAscDesc"].Equals("Asc"))
                        {
                            @Html.ActionLink("Date <Asc>", "Index", new { OrderBy = "DateDesc" }) }
                        else
                        {
                            @Html.ActionLink("Date <Desc>", "Index", new { OrderBy = "DateAsc" })}
                    </strong> }
                else
                {
                    @Html.ActionLink("Date", "Index", new { OrderBy = "DateAsc" });
                }
            </th>
            <th>
                @if (ViewData["OrderBy"].Equals("Status"))
                {
                    <strong>
                        @if (ViewData["OrderAscDesc"].Equals("Asc"))
                        {
                            @Html.ActionLink("Status <Asc>", "Index", new { OrderBy = "StatusDesc" }) }
                        else
                        {
                            @Html.ActionLink("Status <Desc>", "Index", new { OrderBy = "StatusAsc" })}
                    </strong> }
                else
                {
                    @Html.ActionLink("Status", "Index", new { OrderBy = "StatusAsc" })}
            </th>
        </tr>

        @{ int itemNumber = ((Model.PageIndex - 1) * Model.PageSize);
            foreach (var item in Model)
            {
                itemNumber = itemNumber + 1;
                <tr>
                    <td>@itemNumber.ToString()</td>
                    <td>@Html.ActionLink("Edit", "Edit", new { id = item.MarkerID })</td>
                    <td>@Html.ActionLink((string)item.MarkerTitle, "Details", new { id = item.MarkerID })</td>
                    <td>
                        @if (item.Walk != null)
                        {
                            if (item.Walk.WalkTitle.Length > 40)
                            {
                                @Html.ActionLink((string)item.Walk.WalkTitle.Substring(0, 40) + "..", "Details", "Walks", new { id = item.Walk.WalkID }, null) }

                            else
                            {
                                @Html.ActionLink((string)item.Walk.WalkTitle, "Details", "Walks", new { id = item.Walk.WalkID }, null)}
                        }
                    </td>
                    <td>
                        @if (item.Walk != null)
                        {
                            @Html.ActionLink((string)item.Walk.Area.Areaname, "HillsByArea", "Walks", new { id = item.Walk.Area.Arearef.Trim() }, new { dummy = 1 });
                        }
                    </td>
                    <td>
                        @String.Format("{0:D}", item.DateLeft)
                    </td>
                    <td>
                        @item.Status
                    </td>
                </tr>
            } }
    </table>
    <table class="hiddentable">
        <tr>
            <td>@Html.Raw(Model.PageNavigationLinks)</td>
            <td class="alignright">@Model.RecordsShowing Markers</td>
        </tr>
    </table>


    <script>

    //---------------------------------------------------------------------------------------------------
    // The following script loads a leaflet map where data is available
    //----------------------------------------------------------------

    var mineasting = 9999999;
    var maxeasting = -9999999;
    var minnorthing = 9999999;
    var maxnorthing = -9999999;

    //If there are any markers with GPS locations in the current page add them as markers to the map--------
    var markerdata =  @(Html.Raw(JsonConvert.SerializeObject(ViewData["MarkerMarkers"])));

    var markercoords = new Array(markerdata.length);
    var markerpopups = new Array(markerdata.length);

    for (let i = 0; i < markerdata.length; i++)
    {
        const epsg27000 = os.Transform.fromGridRef(markerdata[i].OSMap10);

        if (epsg27000.ea > maxeasting) {
            maxeasting = epsg27000.ea;
        }

        if (epsg27000.ea < mineasting) {
            mineasting = epsg27000.ea;
        }

        if (epsg27000.no > maxnorthing) {
            maxnorthing = epsg27000.no;
        }

        if (epsg27000.no < minnorthing) {
            minnorthing = epsg27000.no;
        }

        markercoords[i] = [epsg27000.ea, epsg27000.no];
        markerpopups[i] = markerdata[i].popupText;
    }

    // Initialize the lealfet map.
    const map = L.map('hillmap', mapOptions);

    // This function will call the specific "get all" function in LeafletHelper to add all hills to the map
    function getAll_Click() {
        getAllMarkersInBounds()
    }

    // Add the "get all" icon to the map
    L.Control.Button = L.Control.extend({
        options: {
            position: 'topleft'
        },
        onAdd: function (map) {
            var container = L.DomUtil.create('div', 'leaflet-bar leaflet-control');
            var button = L.DomUtil.create('a', 'leaflet-control-button', container);
            button.innerHTML = '<img class="customClass" src="/Content/images/all-icon.png">'
            L.DomEvent.disableClickPropagation(button);
            L.DomEvent.on(button, 'click', getAll_Click);

            container.title = "Get all";

            return container;
        },
        onRemove: function (map) { },
    });
    var control = new L.Control.Button()
    control.addTo(map);

    addMarkerMarkersToMap();

    // Finally load and display ZXY tile layer on the map.
    const basemap = L.tileLayer('https://api.os.uk/maps/raster/v1/zxy/Leisure_27700/{z}/{x}/{y}.png?key=' + OSapiKey).addTo(map);


    </script>
