@using MyMVCApp.Model
@using Newtonsoft.Json
@model MyMVCApp.DAL.Marker

@{ViewBag.Title = "Marker: " + Model.MarkerTitle; }

@section ViewSpecificHead
{
    <script type="text/javascript" src="~/Scripts/jquery-2.1.1.js"></script>
}


<div class="spacerdiv"></div>
<table class="datatable">
    <tr>
        <td><h2>Marker Name:</h2></td>
        <td><h2>@Model.MarkerTitle</h2></td>
    </tr>
    <tr>
        <td>Current Status</td>
        <td>@Model.Status</td>
    </tr>
    <tr>
        <td>Left on Hill</td>
        <td>
            @if (Model.Hill != null)
            {@Model.Hill.Hillname}
        </td>
    </tr>
    <tr>
        <td>Left on walk</td>
        <td>
            @if (Model.WalkID != null)
            {
@Html.ActionLink(Model.Walk.WalkTitle, "Details", "Walks", new { id = Model.WalkID }, null) }
else
{
@: No walk associated with marker
}
        </td>
    </tr>
    <tr>
        <td>OS Grid Reference</td>
        <td>@Model.GPS_Reference</td>
    </tr>
    <tr>
        <td>Date Left</td>
        <td>@String.Format("{0:D}", Model.DateLeft)</td>
    </tr>

    <tr>
        <td>Description</td>
        <td>@Html.Raw(Model.Location_Description.Replace(Environment.NewLine, "<br />"))</td>
    </tr>
</table>

<div class="spacerdiv"></div>
<div id="hillmap"></div>
<div class="spacerdiv"></div>
<div><input type="button" id="getallmarkers" value="Show all markers in map bounds" onclick="getAllMarkersInBounds();" /></div>
<div class="spacerdiv"></div>
<table class="datatable">
    <tr>
        <td colspan="4"><h2>Observations</h2></td>
    </tr>
    <tr>
        <th>Date</th>
        <th>Found?</th>
        <th>Walk</th>
        <th>Description</th>
    </tr>
    @foreach (MyMVCApp.DAL.Marker_Observation oMarkerObs in Model.Marker_Observations)
    {
<tr>
    <td>@String.Format("{0:D}", oMarkerObs.DateOfObservation)</td>
    <td>
        @if (oMarkerObs.FoundFlag)
        {
@: Found
}
else
{
@: Not yet re-found
}
    </td>
    <td>@Html.ActionLink(oMarkerObs.Walk.WalkTitle, "Details", "Walks", new { id = oMarkerObs.WalkID }, null)</td>
    <td>@oMarkerObs.ObservationText</td>
</tr>}
</table>
<div class="spacerdiv"></div>

@if (Model.Walk_AssociatedFiles.Count == 0)
{
@: <p>There are no images of the marker</p>
}
else
{
foreach (MyMVCApp.DAL.Walk_AssociatedFile oAssocFile in Model.Walk_AssociatedFiles)
{

<div class="walkdetails">
    <div><img src="~/@oAssocFile.Walk_AssociatedFile_Name" alt="@oAssocFile.Walk_AssociatedFile_Caption" class="walkimage" /></div>
    <div class="imagecaption"><em>@oAssocFile.Walk_AssociatedFile_Caption</em><br />&nbsp;</div>
</div>}
}
<p>
    @Html.ActionLink("Edit", "Edit", new { id = Model.MarkerID }) |
    @Html.ActionLink("Back to List", "Index")
</p>


<script>
    //---------------------------------------------------------------------------------------------------
    // The following script loads a leaflet map where data is available
    //----------------------------------------------------------------

    // Function toInternationalDate ---------------------------------------------------------------------
    // Convert date/time string in format DD/MM/YYYY HH:MM:SS to standard javascript format YYYY/MM/DD
    const toInternationaDate = function (ukDate) {
        var startTimeLoc = ukDate.indexOf(' ');

        //Override end location if ukDate does not contain a time portion
        if (startTimeLoc == -1) {
            startTimeLoc = ukDate.length;
        }

        ukDateSplit = ukDate.substring(0, startTimeLoc).split('/');

        standardDay = ukDateSplit[0];
        standardMonth = ukDateSplit[1];
        standardYear = ukDateSplit[2];

        return new Date(standardYear, standardMonth, standardDay);
    }




    var mineasting = 9999999;
    var maxeasting = -9999999;
    var minnorthing = 9999999;
    var maxnorthing = -9999999;

    //If there are any markers with GPS locations in the current page add them as markers to the map--------
    var markerdata =  @(Html.Raw(JsonConvert.SerializeObject(ViewData["MarkerMarkers"])));

    var markercoords = new Array(markerdata.length);
    var markerpopups = new Array(markerdata.length);

    for (let i = 0; i < markerdata.length; i++)
    {
        const epsg27000 = os.Transform.fromGridRef(markerdata[i].OSMap10);

        if (epsg27000.ea > maxeasting) {
            maxeasting = epsg27000.ea;
        }

        if (epsg27000.ea < mineasting) {
            mineasting = epsg27000.ea;
        }

        if (epsg27000.no > maxnorthing) {
            maxnorthing = epsg27000.no;
        }

        if (epsg27000.no < minnorthing) {
            minnorthing = epsg27000.no;
        }

        markercoords[i] = [epsg27000.ea, epsg27000.no];
        markerpopups[i] = markerdata[i].popupText;
    }
    //----If GPS data is available associated with the the current page of markers, then display the map----
    const OSapiKey = '468YAE3SzsjV8Uu8XPPDQpVVh2mA67vC';

    // using  // https://github.com/OrdnanceSurvey/os-transform
    //----Define the map centre point by converting an os grid reference into ESPG:27000 coordinates

    const map_center = [54.5, -3.09];

    // Setup the EPSG:27700 (British National Grid) projection.
    const crs = new L.Proj.CRS('EPSG:27700', '+proj=tmerc +lat_0=49 +lon_0=-2 +k=0.9996012717 +x_0=400000 +y_0=-100000 +ellps=airy +towgs84=446.448,-125.157,542.06,0.15,0.247,0.842,-20.489 +units=m +no_defs', {
    resolutions: [896.0, 448.0, 224.0, 112.0, 56.0, 28.0, 14.0, 7.0, 3.5, 1.75],
    origin: [-238375.0, 1376256.0]
    });

    // Leaflet works natively in WGS84 -a.k.a. EPSG:4326. The following function converts from OS National grid easting and northing to this.
    const transformCoords = function (arr) {
    return proj4('EPSG:27700', 'EPSG:4326', arr).reverse();
    };

    // Define the options associated with the Leaflet map which will be created
    const mapOptions = {
    crs: crs,
    minZoom: 0,
    maxZoom: 9,
    center: map_center,
    zoom: 8,   // 8 this is the first 1:25000 zoom level
    maxBounds: [    // as defined by the EPSG:27000 coordinate system
    transformCoords([-238375.0, 0.0]),
    transformCoords([900000.0, 1376256.0])
    ],
    attributionControl: true
    };

    // Initialize the lealfet map.
    const map = L.map('hillmap', mapOptions);

    if (markerdata != null) {

        let markeroptions = {
            zIndexOffset: 1000
        };


        //---Add the markers to the map

        for (let i = 0; i < markerdata.length; i++) {
            var thislat = markercoords[i][0];
            var thislong = markercoords[i][1];
            const popText = markerpopups[i];
            const popupOptions = {
                className: "markerPopup"
            }
            marker = new L.marker(transformCoords([thislat, thislong]), markeroptions)
                .bindPopup(popText, popupOptions)
                .openPopup()
                .addTo(map);
        }

        //----Set the bounds of the map so that all the markers are displayed
        map.fitBounds(
            [
                transformCoords([mineasting, minnorthing]),
                transformCoords([maxeasting, maxnorthing])
            ]
        );

    }

    console.log("Now loading the tile layer using OS API...");

    // Finally load and display ZXY tile layer on the map.
    const basemap = L.tileLayer('https://api.os.uk/maps/raster/v1/zxy/Leisure_27700/{z}/{x}/{y}.png?key=' + OSapiKey).addTo(map);

    map.on('moveend', function (e) {
        var newbounds = map.getBounds();
        console.log('New bounds event fired');
        console.log(newbounds);
    });

    function getAllMarkersInBounds() {
        var newbounds = map.getBounds();
        console.log('New bounds event fired');
        console.log(newbounds);

        $.ajax({
            url: document.getElementById("ApplicationRoot").getAttribute("href") + "Marker/_MarkersInMapBounds",
            type: "get",
            data: {
                neLat: newbounds._northEast.lat,
                neLng: newbounds._northEast.lng,
                swLat: newbounds._southWest.lat,
                swLng: newbounds._southWest.lng
            },
            success: function (response) {
                console.log("successfully called ajax function: " + response);
            },
            error: function (errorresponse) {
                console.log("failure called ajax function: " + errorresponse);
            }

        });
    }

</script>

