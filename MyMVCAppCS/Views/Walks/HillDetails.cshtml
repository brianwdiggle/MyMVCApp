@using System.Threading
@using MyMVCApp.DAL
@using MyMVCApp.Model

@{
    ViewBag.Title = Model.Hillname + " " + String.Format("{0}", Model.Feet) + "ft";
}

@section ViewSpecificHead
{
<script type="text/javascript" src="~/Scripts/jquery-2.1.1.js"></script>
}



<div class="spacerdiv"></div>
<div class="walksbydate">
    <table class="datatable">
        <tr>
            <td colspan="2" class="heading2">@Model.Hillname</td>

            <td class="heading2"></td>
            <td class="column4 heading3">@Html.Encode(String.Format("{0}", Model.Feet)) ft, @Html.Encode(String.Format("{0}", Model.Metres)) m</td>
        </tr>
        <tr>
            <td class="column1">First ascent:</td>
            <td class="column2">@Model.FirstClimbedDate</td>
            <td class="column3">Number of ascents: </td>
            <td class="column4">@Model.NumberOfAscents</td>
        </tr>
        <tr>
            <td class="column1">Grid reference:</td>
            <td class="column2">@Model.Gridref10</td>
            <td class="column3">Section:</td>
            <td class="column4">@Model._Section</td>
        </tr>
        <tr>
            <td class="column1">Feature:</td>
            <td class="column2">@Model.Feature</td>
            <td class="column3">Drop:</td>
            <td class="column4">@Model.Drop</td>
        </tr>
        <tr>
            <td class="column1">Classes:</td>
            <td class="column2">@Model.Classification</td>
            <td class="column3">EPSG:27000 coords:</td>
            <td class="column4">@Model.Xcoord , @Model.Ycoord</td>
        </tr>
    </table>
</div>
<div class="spacerdiv"></div>
<div id="hillmap"></div>
<div class="spacerdiv"></div>
<div><input type="button" id="getallmarkers" value="Show all hills in map bounds" onclick="getAllHillsInMapBounds()" /></div>
<div class="spacerdiv"></div>
<div class="walksbydate">
    <table class="datatable">
        @{
            int iAscentCounter = 1;

            var oAscents = (List<HillAscent>)ViewData["HillAscents"];

            <tr>
                <td colspan="4" class="heading2">Ascents</td>
            </tr>

            foreach (HillAscent oAscent in oAscents)
            {

                <tr>
                    <td>@iAscentCounter.ToString(Thread.CurrentThread.CurrentCulture)</td>
                    <td>@Html.Encode(String.Format("{0:D}", oAscent.AscentDate))</td>
                    <td><a href="~/Walks/Details/@oAscent.Walk.WalkID">@oAscent.Walk.WalkTitle</a></td>
                    <td><a href="~/Walks/Details/@oAscent.Walk.WalkID">@oAscent.Walk.WalkSummary</a></td>
                </tr>
                iAscentCounter = iAscentCounter + 1;
            }

            if (iAscentCounter == 1)
            {
                <tr>
                    <td colspan="4">No Ascents</td>
                </tr>
            }
        }

    </table>
</div>

<script>

    var firstClimbedDate = toInternationaDate("@Model.FirstClimbedDate");  // convert from british date format to standard js format
    var dateOptions = {weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };

    // Initialize the lealfet map.
    const map = L.map('hillmap', mapOptions);

    // Display red or green summit icon depending on whether the hill has been climbed
    const climbedsummiticon = L.icon({
        iconUrl: "/Content/images/marker-icon-green.png",
        shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',
        iconSize: [25, 41],
        iconAnchor: [12, 41],
        popupAnchor: [1, -34],
        shadowSize: [41, 41]
    });

    let climbedmapmarkeroptions = {
        zIndexOffset: 500,
        icon: climbedsummiticon
        };

    const unclimbedsummiticon = L.icon({
        iconUrl: "/Content/images/marker-icon-red.png",
        shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',
        iconSize: [25, 41],
        iconAnchor: [12, 41],
        popupAnchor: [1, -34],
        shadowSize: [41, 41]
    });

    let unclimbedmapmarkeroptions = {
        zIndexOffset: 1000,
        icon: unclimbedsummiticon
    };

     //---Add hill as a marker on the map-----------
    if (firstClimbedDate != null && firstClimbedDate != "" && firstClimbedDate != "Invalid Date") {

        const hill_marker = L.marker(transformCoords([@Model.Xcoord, @Model.Ycoord]), climbedmapmarkeroptions)
            .bindPopup("<b>@Model.Hillname" + ", @Model.Metres" + "m</b><br>First climbed: " + firstClimbedDate.toLocaleDateString("en-GB", dateOptions))
            .openPopup()
            .addTo(map); //Add hill marker to map, converting coords to WGS84
    } else {

        const hill_marker = L.marker(transformCoords([@Model.Xcoord, @Model.Ycoord]), unclimbedmapmarkeroptions)
            .bindPopup("<b>@Model.Hillname" + ", @Model.Metres" +"m</b><br>Not yet climbed")
            .openPopup()
            .addTo(map) //Add hill marker to map, converting coords to WGS84
    }

    map.setView(new L.LatLng(@Model.Latitude, @Model.Longitude));

    // Finally load and display ZXY tile layer on the map.
    const basemap = L.tileLayer('https://api.os.uk/maps/raster/v1/zxy/Leisure_27700/{z}/{x}/{y}.png?key=' + OSapiKey).addTo(map);

</script>


