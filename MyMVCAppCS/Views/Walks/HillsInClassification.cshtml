@using MyMVCApp.DAL
@using Newtonsoft.Json
@model MyMVCAppCS.Models.PaginatedListMVC<Hill>

@{ ViewBag.Title = "Hills in Classification " + ViewData["HillClassName"];}

@section ViewSpecificHead
{
<script type="text/javascript" src="~/Scripts/jquery-2.1.1.js"></script>
<script>

    function ReloadWithNewPageSize() {
        var newhref = window.location.pathname;
        console.log("newhref with pathname: " + newhref);
        var number_querystring_added = 0;

        const urlParams = new URLSearchParams(window.location.search);

        if (urlParams.get('OrderBy') != null) {
            newhref = newhref + "?OrderBy=" + urlParams.get('OrderBy');
            number_querystring_added = 1;
        } else {
            newhref = newhref + "?OrderBy=NameAsc";
        }

        if (urlParams.get('page') != null) {
            newhref = newhref + "&page=" + urlParams.get('page');
        } else {
                newhref = newhref + "&page=1";
        }    

        newhref = newhref + "&requestPageSize=" + $("#pagesize").val();
        
        console.log("newhref finally is now : " + newhref);
        window.location.href = newhref;

    }
    /*----Update page size----*/
    $(document).ready(function () {
        $('#changepagesize').click(function () {
            ReloadWithNewPageSize();
        });
    });

    </script>
}

    <h2>@ViewData["HillClassName"]s <em>(@ViewData["NumberClimbed"] of @Model.TotalCount climbed)</em></h2>

    <table class="hiddentable">
        <tr>
            <td>
                @Html.Raw(Model.PageNavigationLinks)
            </td>
            <td>Page Size: <input type="text" name="pagesize" id="pagesize" size="3" value="@ViewData["pagesize"]"  /><input type="button" value="Change" class="pagesizebutton" id="changepagesize"/></td>
            <td align="right">Showing @Model.RecordsShowing Hills</td>
        </tr>
    </table>

    <div class="spacerdiv"></div>
    <div id="hillmap"></div>
    <div class="spacerdiv"></div>


    <table class="walksbydate">
        <tr class="heightcell">
            <th>No.</th>
            <th>
                @if (ViewData["OrderBy"].Equals("Name"))
                {
                    <strong>
                        @if (ViewData["OrderAscDesc"].Equals("Asc"))
                        {
                            @Html.ActionLink("Name <Asc>", "HillsInClassification", new { OrderBy = "NameDesc", requestPageSize = ViewData["pagesize"] }, new { @class="gold"}) }
                        else
                        {
                            @Html.ActionLink("Name <Desc>", "HillsInClassification", new { OrderBy = "NameAsc", requestPageSize = ViewData["pagesize"] }, new { @class = "gold" })}
                    </strong> }
                else
                {
                    @Html.ActionLink("Name", "HillsInClassification", new { OrderBy = "NameDesc", requestPageSize = ViewData["pagesize"] }, new { @class = "gold" })}
            </th>
            <th>Classes</th>
            <th>
                @if (ViewData["OrderBy"].Equals("Metres"))
                {
                    <strong>
                        @if (ViewData["OrderAscDesc"].Equals("Asc"))
                        {
                            @Html.ActionLink("Metres <Asc>", "HillsInClassification", new { OrderBy = "MetresDesc", requestPageSize = ViewData["pagesize"] }, new { @class = "gold" }) }
                        else
                        {
                            @Html.ActionLink("Metres <Desc>", "HillsInClassification", new { OrderBy = "MetresAsc", requestPageSize = ViewData["pagesize"] }, new { @class = "gold" })}
                    </strong> }
                else
                {
                    @Html.ActionLink("Metres", "HillsInClassification", new { OrderBy = "MetresDesc", requestPageSize = ViewData["pagesize"] }, new { @class = "gold" })}
            </th>
            <th>Feet</th>
            <th>Gridref</th>
            <th>Drop</th>
            <th>
                @if (ViewData["OrderBy"].Equals("FirstAscent"))
                {
                    <strong>
                        @if (ViewData["OrderAscDesc"].Equals("Asc"))
                        {
                            @Html.ActionLink("Date Climbed <Asc>", "HillsInClassification", new { OrderBy = "FirstAscentDesc", requestPageSize = ViewData["pagesize"] }, new { @class = "gold" }) }
                        else
                        {
                            @Html.ActionLink("Date Climbed <Desc>", "HillsInClassification", new { OrderBy = "FirstAscentAsc", requestPageSize = ViewData["pagesize"] }, new { @class = "gold" })}
                    </strong> }
                else
                {
                    @Html.ActionLink("Date Climbed", "HillsInClassification", new { OrderBy = "FirstAscentDesc", requestPageSize = ViewData["pagesize"] }, new { @class = "gold" })}
            </th>
            <th>
                @if (ViewData["OrderBy"].Equals("NumberAscent"))
                {
                    <strong>
                        @if (ViewData["OrderAscDesc"].Equals("Asc"))
                        {
                            @Html.ActionLink("Ascents <Asc>", "HillsInClassification", new { OrderBy = "NumberAscentDesc", requestPageSize = ViewData["pagesize"] }, new { @class = "gold" }) }
                        else
                        {
                            @Html.ActionLink("Ascents <Desc>", "HillsInClassification", new { OrderBy = "NumberAscentAsc", requestPageSize = ViewData["pagesize"] }, new { @class = "gold" })}
                    </strong> }
                else
                {
                    @Html.ActionLink("Ascents", "HillsInClassification", new { OrderBy = "NumberAscentDesc", requestPageSize = ViewData["pagesize"] }, new { @class = "gold" })}
            </th>
        </tr>

        @{ int iHillNumberInClassification = ((Model.PageIndex - 1) * Model.PageSize) + 1;

            foreach (Hill item in Model)
            {

                <tr style="background-color:@Html.Raw(WalkingStick.NumberOfAscentsAsColour(item.NumberOfAscents))">
                    <td class="hilllistnumber">@iHillNumberInClassification</td>
                    <td class="hillname">@Html.ActionLink(item.Hillname, "HillDetails", new { id = item.Hillnumber }) </td>
                    <td class="hillclasses">@Html.Raw(WalkingStick.HillClassesToLinks(item.Classification, VirtualPathUtility.ToAbsolute("~/")))</td>
                    <td>@Html.Encode(String.Format("{0:#}", item.Metres))</td>
                    <td>@String.Format("{0:#}", item.Feet)</td>
                    <td class="gridref">
                        @if (!string.IsNullOrEmpty(item.Gridref))
                        {
                            @item.Gridref10 }
                        else
                        {
                            @item.Gridref}
                    </td>
                    <td>@String.Format("{0:#}", item.Drop)</td>
                    <td class="firstclimbeddate">@String.Format("{0:D}", item.FirstClimbedDate)</td>
                    <td>@String.Format("{0:#}", item.NumberOfAscents)</td>
                </tr>
 iHillNumberInClassification = iHillNumberInClassification + 1;

            } }

    </table>
    <table class="hiddentable">
        <tr>
            <td colspan="3">&nbsp;</td>
        </tr>
        <tr>
            <td>
                @Html.Raw(Model.PageNavigationLinks)
            </td>
            <td>Page Size: <input type="text" name="pagesize" size="3" /></td>
            <td align="right">Showing @Model.RecordsShowing Hills</td>
        </tr>
    </table>

    <script>

    //---------------------------------------------------------------------------------------------------
    // The following script loads a leaflet map where data is available
    //----------------------------------------------------------------

    var mineasting = 9999999;
    var maxeasting = -9999999;
    var minnorthing = 9999999;
    var maxnorthing = -9999999;

    //If there are any hills with GPS locations in the current page add them as markers to the map--------
    var markerdata =  @(Html.Raw(JsonConvert.SerializeObject(ViewData["HillMarkers"])));

    var markercoords = new Array(markerdata.length);
    var markerpopups = new Array(markerdata.length);

    for (let i = 0; i < markerdata.length; i++)
    {
        const epsg27000 = os.Transform.fromGridRef(markerdata[i].OSMap10);

        if (epsg27000.ea > maxeasting) {
            maxeasting = epsg27000.ea;
        }

        if (epsg27000.ea < mineasting) {
            mineasting = epsg27000.ea;
        }

        if (epsg27000.no > maxnorthing) {
            maxnorthing = epsg27000.no;
        }

        if (epsg27000.no < minnorthing) {
            minnorthing = epsg27000.no;
        }

        markercoords[i] = [epsg27000.ea, epsg27000.no];
        markerpopups[i] = markerdata[i].popupText;
    }

    // Initialize the lealfet map.
    const map = L.map('hillmap', mapOptions);

    // This function will call the specific "get all" function in LeafletHelper to add all hills to the map
    function getAll_Click() {
        getAllHillsInMapBounds();
    }


    // This function will call the specific "get all" function in LeafletHelper to add all hills in the current class to the map
    function getAllInClass_Click() {
            
        getAllHillsInClassInMapBounds(window.location.pathname);
     }

    // Add the "get all" icon to the map
    L.Control.Button = L.Control.extend({
        options: {
            position: 'topleft'
        },
        onAdd: function (map) {
            var container = L.DomUtil.create('div', 'leaflet-bar leaflet-control');
            var button = L.DomUtil.create('a', 'leaflet-control-button', container);
            button.innerHTML = '<img class="customClass" src="/Content/images/all-icon.png">'
            L.DomEvent.disableClickPropagation(button);
            L.DomEvent.on(button, 'click', getAll_Click);

            container.title = "Get all hills in map bounds";

            return container;
        },
        onRemove: function (map) { },
    });

    var control = new L.Control.Button();
    control.addTo(map);

    // Add the "get all in class" icon to the map
    L.Control.Button = L.Control.extend({
        options: {
            position: 'topleft'
        },
        onAdd: function (map) {
            var container = L.DomUtil.create('div', 'leaflet-bar leaflet-control');
            var button = L.DomUtil.create('a', 'leaflet-control-button', container);
            button.innerHTML = '<img class="customClass" src="/Content/images/all-class-icon.png">'
            L.DomEvent.disableClickPropagation(button);
            L.DomEvent.on(button, 'click', getAllInClass_Click);

            container.title = "Get all hills in map bounds of current hill class";

            return container;
        },
        onRemove: function (map) { },
    });

    var control2 = new L.Control.Button();
    control2.addTo(map);


    if (markerdata != null) {

        //---Add the markers to the map

        for (let i = 0; i < markerdata.length; i++) {
            var thislat = markercoords[i][0];
            var thislong = markercoords[i][1];
            const popText = markerpopups[i];
            const popupOptions = {
                className: "markerPopup"
            }

            if (markerdata[i].numberOfAscents > 0) {
                marker = new L.marker(transformCoords([thislat, thislong]), climbedmapmarkeroptions)
                    .bindPopup(popText, popupOptions)
                    .openPopup()
                    .addTo(map);
            } else {
                marker = new L.marker(transformCoords([thislat, thislong]), unclimbedmapmarkeroptions)
                    .bindPopup(popText, popupOptions)
                    .openPopup()
                    .addTo(map);
            }

        }

        //----Set the bounds of the map so that all the markers are displayed
        map.fitBounds(
            [
                transformCoords([mineasting, minnorthing]),
                transformCoords([maxeasting, maxnorthing])
            ]
        );

    }

    // Finally load and display ZXY tile layer on the map.
    const basemap = L.tileLayer('https://api.os.uk/maps/raster/v1/zxy/Leisure_27700/{z}/{x}/{y}.png?key=' + OSapiKey).addTo(map);


    </script>

