
@using System.Threading
@using MyMVCApp.DAL
@using MyMVCApp.Model
@using Newtonsoft.Json

@model Walk
@{
    ViewBag.Title = Model.WalkTitle + ", " + String.Format("{0:D}", Model.WalkDate);
}
@section ViewSpecificHead
{
    <script type="text/javascript" src="~/Scripts/jquery-2.1.1.js"></script>
}
<div class="details">
    <table>
        <tr>
            <td colspan="3"><div class="heading2">@Model.WalkTitle, @String.Format("{0:D}", Model.WalkDate)</div></td>
            <td class="column4 heading3">@Html.ActionLink("Edit walk", "Edit", new { id = Model.WalkID })</td>
        </tr>
    </table>
</div>
<div class="details">
    <table class="datatable">
        <tr>
            <td colspan="4" class="heading4">@Model.WalkSummary</td>
        </tr>
    </table>
</div>

<div class="details">
    <table class="datatable">
        <tr>
            <td class="column1"><b>Type:</b></td>
            <td class="column2">@Model.WalkType</td>
            <td class="column3"><b>Walk Area:</b></td>
            <td class="column4">@Html.ActionLink(Model.WalkAreaName, "HillsByArea", new { id = Model.Area.Arearef.Trim() }) </td>
        </tr>
        <tr>
            @{
                if (Model.CartographicLength != null)
                {
                    <td class="column1"><b>Length:</b></td>
                    <td class="column2">@String.Format("{0:F}", Model.CartographicLength) Km</td>
                }
                else
                {
                    <td class="column1"><b>Length:</b></td>
                    <td class="column2"></td>
                }
            }
            @{
                if (Model.MetresOfAscent != null)
                {
                    <td class="column3"><b>Ascent:</b></td>
                    <td class="column4">@Model.MetresOfAscent m</td>
                }
                else
                {
                    <td class="column3"><b>Ascent:</b></td>
                    <td class="column4"></td>
                }
            }
        </tr>
        <tr>
            @{
                if (!String.IsNullOrEmpty(Model.WalkConditions) && Model.WalkConditions.Length > 0)
                {
                    <td class="column1"><b>Conditions:</b></td>
                    <td class="column2"><b>@Model.WalkConditions</b></td>
                }
                else
                {
                    <td class="column1"><b>Conditions:</b></td>
                    <td class="column2"></td>
                }
            }
            @{
                if (!String.IsNullOrEmpty(Model.WalkCompanions) && Model.WalkCompanions.Length > 0)
                {
                    <td class="column3"><b>With:</b></td>
                    <td class="column4">@Model.WalkCompanions </td>
                }
                else
                {
                    <td class="column3"><b>With:</b></td>
                    <td class="column4">Holy Spirit</td>
                }
            }
        </tr>
        <tr>
            @{
                if (ViewData["TotalTime"] != null && ViewData["TotalTime"].ToString().Length > 0)
                {
                    <td class="column1"><b>Total Time:</b></td>
                    <td class="column2">@ViewData["TotalTime"]</td>
                }
                else
                {
                    <td class="column1"><b>Total Time:</b></td>
                    <td class="column2"></td>
                }
            }

            @{
                if (Model.MovingAverageKmh != null)
                {
                    <td class="column3"><b>Moving average (km/h):</b></td>
                    <td class="column4">@Model.MovingAverageKmh Km/h</td>
                }
                else
                {
                    <td class="column3"><b>Moving average (km/h):</b></td>
                    <td class="column4"></td>
                }
            }
        </tr>
        <tr>
            @{
                if (Model.WalkAverageSpeedKmh != null)
                {
                    <td class="column1"><b>Overall speed (km/h):</b></td>
                    <td class="column2">@Model.WalkAverageSpeedKmh Km/h</td>
                }
            }


        </tr>
    </table>
</div>
<div class="details">
    <table class="datatable">
        <tr>
            <td colspan="2">@Html.Raw(Model.WalkDescription.Replace(Environment.NewLine, "<br />")) </td>
        </tr>
    </table>
</div>

<div class="details">
    @if (Model.Marker_Observations.Count > 0)
    {
        <table class="datatable">
            <tr><td><span class="heading3">Markers</span></td></tr>

            @foreach (Marker_Observation oMarkerObs in Model.Marker_Observations)
            {
                <tr>
                    <td><em>@Html.ActionLink(oMarkerObs.Marker.MarkerTitle, "Details", "Marker", new { id = oMarkerObs.MarkerID }, null) </em>  @oMarkerObs.ObservationText </td>
                </tr>
            }
        </table>
    }
    else
    {
        <table class="datatable">
            <tr>
                <td>No Markers</td>
            </tr>
        </table>
    }
</div>
<div>
    @if (Model.HillAscents.Count > 0)
    {
        <table class="datatable">
            <tr><td colspan="4"><span class="heading3">Ascents on this walk</span></td></tr>
            <tr>
                <th class="hillname">Name</th>
                <th class="hillname">Height</th>
                <th class="hillname">Classes</th>
                <th class="hillname"></th>
            </tr>

            @foreach (HillAscent oHillAscent in Model.HillAscents)
            {
                <tr>
                    <td>@Html.ActionLink(oHillAscent.Hill.Hillname, "HillDetails", "Walks", new { id = oHillAscent.Hillnumber }, null) </td>
                    <td>@oHillAscent.Hill.Metres.ToString(Thread.CurrentThread.CurrentCulture) m, @oHillAscent.Hill.Feet.ToString() ft</td>
                    <td>@oHillAscent.Hill.Classification </td>
                    <td>
                        @ViewData["AscentNumber"]
                        &nbsp;
                    </td>
                </tr>
            }
        </table>
    }
</div>

@if (ViewData["ShowMap"].Equals(1))
{
    <div class="spacerdiv"></div>
    <div id="walkdetailsmap"></div>
    <div class="spacerdiv"></div>
}

<div>
    @foreach (Walk_AssociatedFile oFile in Model.Walk_AssociatedFiles)
    {

        if (oFile.Walk_AssociatedFile_Type.Equals("Image - Altitude Profile"))
        {

            if (SessionSingleton.Current.UsageLocation.Equals(WalkingConstants.AT_HOME))
            {
                <div class="details">
                    <div><img src="~/@oFile.Walk_AssociatedFile_Name" class="walkimage" alt="Altitude Profile" /></div>
                    <div>&nbsp;&nbsp;<strong>Altitude Profile <em>@oFile.Walk_AssociatedFile_Caption</em></strong><br /></div>
                </div>
            }
            else
            {
                <div>&nbsp;<br /><strong>Altitude Profile <em>@oFile.Walk_AssociatedFile_Caption</em></strong><br />@oFile.Walk_AssociatedFile_Name</div>
            }

        }
        else if (oFile.Walk_AssociatedFile_Type.Equals("Image - Map"))
        {
            <div class="walkdetails">
                <div><img src="~/@oFile.Walk_AssociatedFile_Name" class="walkimage" alt="Map of walk area" /></div>
                <div><strong>&nbsp;&nbsp;Map of Walk Area <em>@oFile.Walk_AssociatedFile_Caption</em></strong></div>
            </div>
        }
        else if (oFile.Walk_AssociatedFile_Type.Equals("Image - Map with track"))
        {

            <div class="walkdetails">
                <div><img src="~/@oFile.Walk_AssociatedFile_Name" class="walkimage" alt="Map with track overlay" /></div>
                <div>&nbsp;&nbsp;Map with track overlay <em>@oFile.Walk_AssociatedFile_Caption </em></div>
            </div>
        }
        else if (oFile.Walk_AssociatedFile_Type.Equals("Image  - Map with Route"))  // Note extra space after Image!
        {
            <div class="walkdetails">
                <div><img src="~/@oFile.Walk_AssociatedFile_Name" class="walkimage" alt="Map with route overlay" /></div>
                <div>&nbsp;&nbsp;Map with route overlay <em>@oFile.Walk_AssociatedFile_Caption </em><br /></div>
            </div>
        }
        else if (oFile.Walk_AssociatedFile_Type.Equals("GPX File"))
        {
            <div class="details"><strong><a href="~/@oFile.Walk_AssociatedFile_Name" title="GPX file">GPX file with Track of the walk <em>@oFile.Walk_AssociatedFile_Caption</em></a></strong></div>
        }
        else if (oFile.Walk_AssociatedFile_Type.Equals("GPX File with Route and Track"))
        {
            <div class="details">&nbsp;<strong><a href="~/@oFile.Walk_AssociatedFile_Name" title="GPX file">GPX file with Route and Track of the walk <em>@oFile.Walk_AssociatedFile_Caption</em></a></strong></div>
        }
        else if (oFile.Walk_AssociatedFile_Type.Equals("GPX File with Route"))
        {
            <div class="details"><strong><a href="~/@oFile.Walk_AssociatedFile_Name" title="GPX file">GPX file with Route <em>@oFile.Walk_AssociatedFile_Caption</em></a></strong></div>
        }
        else if (oFile.Walk_AssociatedFile_Type.Equals("GPX File with Marker"))
        {
            <div class="details"><strong><a href="~/@oFile.Walk_AssociatedFile_Name" title="GPX file with marker">GPX file with Marker Location <em>@oFile.Walk_AssociatedFile_Caption</em></a></strong></div>
        }
        else if (oFile.Walk_AssociatedFile_Type.Equals("GTM File for GPS Trackmaker"))
        {
            <div class="details"><strong><a href="~/@oFile.Walk_AssociatedFile_Name" title="GPX file">GTM File for GPS Trackmaker <em>@oFile.Walk_AssociatedFile_Caption</em></a></strong></div>
        }
        else if (oFile.Walk_AssociatedFile_Type.Equals("MOV file"))
        {
            <div class="video-rounded-border"><video width="900" controls="controls" name="@oFile.Walk_AssociatedFile_Caption" src="~/@oFile.Walk_AssociatedFile_Name"></video></div>
            if (oFile.Walk_AssociatedFile_Caption != null)
            {
                <div>Video : <em>@oFile.Walk_AssociatedFile_Caption</em><br />&nbsp;</div>
            }

        }
        else if (oFile.Walk_AssociatedFile_Type.Equals("Image - Stats"))
        {
            <div class="walkdetails">
                <div><img src="~/@oFile.Walk_AssociatedFile_Name" class="walkimage" alt="Stats from the walk" /></div>
                <div><strong>&nbsp;&nbsp;Stats from the walk<em>@oFile.Walk_AssociatedFile_Caption </em></strong><br /></div>
            </div>
        }
    }

    @{
        int iCounter = 1;
        foreach (Walk_AssociatedFile oFile in Model.Walk_AssociatedFiles)
        {
            if (oFile.Walk_AssociatedFile_Type.Equals("Image"))
            {
                <div class="walkdetailsimage">
                    <div><img src="~/@oFile.Walk_AssociatedFile_Name" alt="@oFile.Walk_AssociatedFile_Caption" class="walkimage" /></div>
                    <div class="imagecaption">@oFile.Walk_AssociatedFile_Caption</div>
                </div>
                iCounter = iCounter + 1;
            }
        }
    }
    <p>
        @Html.ActionLink("Edit this walk", "Edit", new { id = Model.WalkID })
    </p>
</div>

<script>
//---------------------------------------------------------------------------------------------------
// The following script loads a leaflet map where data is available
//----------------------------------------------------------------

//If there is a track available, copy track data into a json array
var trackdata = @(Html.Raw(JsonConvert.SerializeObject(ViewData["TrackPoints"])));
if (trackdata != null) {
    var trackcoords = new Array(trackdata.length);
    var trackdatalength = trackdata.length;

    for (let i = 0; i < trackdata.length; i++) {
        trackcoords[i] = [trackdata[i].latitude, trackdata[i].longtitude];
    }
}

//If there is a route available, copy route data into a json array
var routedata = @(Html.Raw(JsonConvert.SerializeObject(ViewData["RouteWaypoints"])));
if (routedata != null) {
    var routecoords = new Array(routedata.length);

    for (let i = 0; i < routedata.length; i++) {
        routecoords[i] = [routedata[i].latitude, routedata[i].longtitude];
    }
}

//If there are any ascents associated with this walk, add them as markers to the map--------
var ascentdata = @(Html.Raw(JsonConvert.SerializeObject(ViewData["AscentMarkers"])));
if (ascentdata != null) {

    var ascentcoords = new Array(ascentdata.length);
    var ascentpopups = new Array(ascentdata.length);

    for (let i = 0; i < ascentdata.length; i++) {
        ascentcoords[i] = [ascentdata[i].latitude, ascentdata[i].longtitude];
        ascentpopups[i] = ascentdata[i].popupText;
    }
}

//If there are any markers associated with this walk, add them as markers to the map--------
var markerdata =  @(Html.Raw(JsonConvert.SerializeObject(ViewData["MarkerMarkers"])));
if (markerdata != null) {
    var markercoords = new Array(markerdata.length);
    var markerpopups = new Array(markerdata.length);

    for (let i = 0; i < markerdata.length; i++) {
        const epsg27000 = os.Transform.fromGridRef(markerdata[i].OSMap10);
        markercoords[i] = [epsg27000.ea, epsg27000.no];
        markerpopups[i] = markerdata[i].popupText;
    }
}


 // Initialize the lealfet map.
 const map = L.map('walkdetailsmap', mapOptions);

//----If GPS data is available associated with the walk, then display the map----

if (routedata != null || trackdata != null || ascentdata != null || markedata !=null) {

 

    // This function will call the specific "get all" function in LeafletHelper to add all hills to the map
    function getAll_Click() {
        getAllHillsInMapBounds();
    }

    // Add the "get all" icon to the map
    L.Control.Button = L.Control.extend({
        options: {
            position: 'topleft'
        },
        onAdd: function (map) {
            var container = L.DomUtil.create('div', 'leaflet-bar leaflet-control');
            var button = L.DomUtil.create('a', 'leaflet-control-button', container);
            button.innerHTML = '<img class="customClass" src="/Content/images/all-icon.png">'
            L.DomEvent.disableClickPropagation(button);
            L.DomEvent.on(button, 'click', getAll_Click);

            container.title = "Get all";

            return container;
        },
        onRemove: function (map) { },
    });
    var control = new L.Control.Button()
    control.addTo(map);


    if (trackdata != null) {
        //  Add the track to the map
        const polyline = L.polyline(trackcoords, { color: '#C0392B', weight: 4 }).addTo(map);
        console.log("fitting track bounds");
        map.fitBounds(polyline.getBounds());
        console.log("completed fitting track bounds");
    }

    if (routedata != null) {
        //   Add the route to the map
        const polyline = L.polyline(routecoords, { color: '#6C3483', weight: 4 }).addTo(map);
        console.log("fitting route bounds");
        map.fitBounds(polyline.getBounds());
    }

    // add the marker markers to the map.
    if (markerdata != null && markerdata.length > 0) {

        var mineasting = 9999999;
        var maxeasting = -9999999;
        var minnorthing = 9999999;
        var maxnorthing = -9999999;

        let markeroptions = {
            zIndexOffset: 300
        };

        for (let i = 0; i < markerdata.length; i++) {

            var thislat = markercoords[i][0];
            var thislong = markercoords[i][1];
            const popText = markerpopups[i];
            const popupOptions = {
                className: "markerPopup"
            }

            const epsg27000 = os.Transform.fromGridRef(markerdata[i].OSMap10);

            if (epsg27000.ea > maxeasting) {
                maxeasting = epsg27000.ea;
            }

            if (epsg27000.ea < mineasting) {
                mineasting = epsg27000.ea;
            }

            if (epsg27000.no > maxnorthing) {
                maxnorthing = epsg27000.no;
            }

            if (epsg27000.no < minnorthing) {
                minnorthing = epsg27000.no;
            }

            marker = new L.marker(transformCoords([thislat, thislong]), markeroptions)
                .bindPopup(popText, popupOptions).
                openPopup()
                .addTo(map);
        }

        //----Set the bounds of the map so that all the markers are displayed

        if (trackdata == null && routedata == null) {
            console.log("setting map bounds for marker markers");
            map.fitBounds(
                [
                    transformCoords([mineasting, minnorthing]),
                    transformCoords([maxeasting, maxnorthing])
                ]
            );
        }
    }

    //---add ascent markers to the map
    if (ascentdata != null && ascentdata.length>0) {

        var mineasting = 9999999;
        var maxeasting = -9999999;
        var minnorthing = 9999999;
        var maxnorthing = -9999999;

        const ascenticon = L.icon({
            iconUrl: "../../Content/images/TrigGreen.gif",
            iconSize: [13, 13],
            iconAnchor: [6, 13]
        });

        let markeroptions = {
            zIndexOffset: 500,
            icon: ascenticon
        };

        for (let i = 0; i < ascentdata.length; i++) {
            var thislat = ascentcoords[i][0];
            var thislong = ascentcoords[i][1];
            const popText = ascentpopups[i];

            const epsg27000 = os.Transform.fromLatLng({ lat: thislat, lng: thislong });

            if (epsg27000.ea > maxeasting) {
                maxeasting = epsg27000.ea;
            }

            if (epsg27000.ea < mineasting) {
                mineasting = epsg27000.ea;
            }

            if (epsg27000.no > maxnorthing) {
                maxnorthing = epsg27000.no;
            }

            if (epsg27000.no < minnorthing) {
                minnorthing = epsg27000.no;
            }

            marker = new L.marker(transformCoords([epsg27000.ea, epsg27000.no]), markeroptions)
                .bindPopup(popText).
                openPopup()
                .addTo(map);

        }

        //----Set the bounds of the map so that all the markers are displayed.
        //----Only do so when there is no route or track data
        if (trackdata == null && routedata == null) {
            console.log("fitting ascent bounds");
            map.fitBounds(
                [
                    transformCoords([mineasting, minnorthing]),
                    transformCoords([maxeasting, maxnorthing])
                ]
            );
        }

    }

    // Finally load and display ZXY tile layer on the map.
    const basemap = L.tileLayer('https://api.os.uk/maps/raster/v1/zxy/Leisure_27700/{z}/{x}/{y}.png?key=' + OSapiKey).addTo(map);
}

</script>
