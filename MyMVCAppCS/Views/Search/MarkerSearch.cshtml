@using System.Threading
@using MyMVCApp.DAL
@using Newtonsoft.Json
@model MyMVCAppCS.ViewModels.MarkerSearchViewModel

@{ViewBag.Title = "Search walking database for Markers"; }

@section ViewSpecificHead
{
    <script src="../../Scripts/MicrosoftAjax.js" type="text/javascript"></script>
    <script src="../../Scripts/MicrosoftMvcValidation.js" type="text/javascript"></script>
    <script type="text/javascript" src="~/Scripts/jquery-2.1.1.js"></script>
}

<h2>Marker Search</h2>

@if (Model.MarkerResultsAvailable)
{
    @Html.Raw(Model.SearchSummary)
    <p><strong> @(Model.MarkersFound.Count.ToString(Thread.CurrentThread.CurrentCulture)) markers found </strong></p>

    <div class="spacerdiv"></div>
    <div id="hillmap"></div>
    <div class="spacerdiv"></div>

    <table class="walksbydate">
        <tr>
            <th>No.</th>
            <th>Marker Title</th>
            <th>Hill</th>
            <th>OS Grid Reference</th>
            <th>Date left</th>
            <th>Status</th>
        </tr>

        @{ int iResultCounter = 0;
            foreach (Marker marker in Model.MarkersFound)
            {
                iResultCounter++;

                <tr>
                    <td>@iResultCounter.ToString(Thread.CurrentThread.CurrentCulture) </td>
                    <td>@Html.ActionLink(marker.MarkerTitle, "Details", "Marker", new { id = marker.MarkerID }, new { dummy = 1 })</td>
                    <td>
                        @if (marker.Hillnumber != null)
                        {
                            @Html.ActionLink(marker.Hill.Hillname, "HillDetails", "Walks", new { id = marker.Hill.Hillnumber }, new { dummy = 1 })}
                    </td>
                    <td>@marker.GPS_Reference</td>
                    <td>@marker.DateLeft.ToString("dd MMMM yyyy")</td>
                    <td>@marker.Status.ToString()</td>
                </tr>
            } }
    </table>
}

<div class="spacerdiv"></div>
<div><strong>Modify your search:</strong></div>
<div class="spacerdiv"></div>

@using (Html.BeginForm())
{

    @Html.ValidationSummary(true)


    <table class="walksbydate">
        <tr>
            <td class="header">Title</td>
            <td>
                @Html.TextBoxFor(model => model.SearchMarkerTitle, new { style = "width:300px" })
                @Html.ValidationMessageFor(model => model.SearchMarkerTitle) use AND for multiple terms
            </td>
        </tr>
        <tr>
            <td class="header">Description</td>
            <td>@Html.TextBoxFor(model => model.SearchMarkerDescription, new { style = "width:300px" })</td>
        </tr>

        <tr>
            <td class="header">Hill Ascended</td>
            <td>@Html.TextBoxFor(model => model.SearchMarkerHill, new { style = "width:300px" })</td>
        </tr>
        <tr>
            <td class="header">Date left from</td>
            <td>
                @Html.TextBoxFor(model => model.DateFromDay, new { style = "width:50px" })
                @Html.DropDownListFor(model => model.DateFromMonth, Model.DateFromMonthList)
                @Html.TextBoxFor(model => model.DateFromYear, new { style = "width:50px" })<br />
            </td>
        </tr>
        <tr>
            <td class="header">Date left to</td>
            <td>
                @Html.TextBoxFor(model => model.DateToDay, new { style = "width:50px" })
                @Html.DropDownListFor(model => model.DateToMonth, Model.DateToMonthList)
                @Html.TextBoxFor(model => model.DateToYear, new { style = "width:50px" })
            </td>
        </tr>

        <tr>
            <td class="header">Field Combination</td>
            <td>
                @Html.DropDownListFor(model => model.FieldCombination, Model.FieldCombinationList)
            </td>
        </tr>

        <tr>
            <td></td>
            <td>
                <input type="submit" value="Search for Matching Markers" />
            </td>
        </tr>
    </table>}

<script>

    var mineasting = 9999999;
    var maxeasting = -9999999;
    var minnorthing = 9999999;
    var maxnorthing = -9999999;

    //If there are any markers with GPS locations in the current page add them as markers to the map--------
    var markerdata =  @(Html.Raw(JsonConvert.SerializeObject(ViewData["MarkerMarkers"])));

    var markercoords = new Array(markerdata.length);
    var markerpopups = new Array(markerdata.length);

    for (let i = 0; i < markerdata.length; i++)
    {
        const epsg27000 = os.Transform.fromGridRef(markerdata[i].OSMap10);

        if (epsg27000.ea > maxeasting) {
            maxeasting = epsg27000.ea;
        }

        if (epsg27000.ea < mineasting) {
            mineasting = epsg27000.ea;
        }

        if (epsg27000.no > maxnorthing) {
            maxnorthing = epsg27000.no;
        }

        if (epsg27000.no < minnorthing) {
            minnorthing = epsg27000.no;
        }

        markercoords[i] = [epsg27000.ea, epsg27000.no];
        markerpopups[i] = markerdata[i].popupText;
    }

    // Initialize the lealfet map.
    const map = L.map('hillmap', mapOptions);

    function getAll_Click() {
        getAllMarkersInBounds()
    }

    // This function will call the specific "get all" function in LeafletHelper to add all hills to the map
    function getAllHills_Click() {
        getAllHillsInMapBounds();
    }

    if (markerdata != null) {


        // Add the "get all" icon to the map
        L.Control.Button = L.Control.extend({
            options: {
                position: 'topleft'
            },
            onAdd: function (map) {
                var container = L.DomUtil.create('div', 'leaflet-bar leaflet-control');
                var button = L.DomUtil.create('a', 'leaflet-control-button', container);
                button.innerHTML = '<img class="customClass" src="/Content/images/all-markers-icon.png">'
                L.DomEvent.disableClickPropagation(button);
                L.DomEvent.on(button, 'click', getAll_Click);

                container.title = "Get all markers in map bounds";

                return container;
            },
            onRemove: function (map) { },
        });

        var control = new L.Control.Button()
        control.addTo(map);

        // Add the "get all in class" icon to the map
        L.Control.Button = L.Control.extend({
            options: {
                position: 'topleft'
            },
            onAdd: function (map) {
                var container = L.DomUtil.create('div', 'leaflet-bar leaflet-control');
                var button = L.DomUtil.create('a', 'leaflet-control-button', container);
                button.innerHTML = '<img class="customClass" src="/Content/images/all-hills-icon.png">'
                L.DomEvent.disableClickPropagation(button);
                L.DomEvent.on(button, 'click', getAllHills_Click);

                container.title = "Get all hills in map bounds";

                return container;
            },
            onRemove: function (map) { },
        });

        var control2 = new L.Control.Button();
        control2.addTo(map);

        addMarkersToMap();

    }

    // Finally load and display ZXY tile layer on the map.
    const basemap = L.tileLayer('https://api.os.uk/maps/raster/v1/zxy/Leisure_27700/{z}/{x}/{y}.png?key=' + OSapiKey).addTo(map);


</script>



